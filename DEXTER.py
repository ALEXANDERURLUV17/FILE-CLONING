#__________________| INFO |___________________#
#______SCRIPT ENCRYPTED BY PYTHON 3.0
#______CODING BY: U7P4L 1N
#______GITHUB : https://github.com/U7P4L-IN
#________________| SCRIPT DATA |_____________#

import base64
exec(base64.b64decode(b'ZnJvbSBvcyBpbXBvcnQgcGF0aA0KaW1wb3J0IG9zLGJhc2U2NCx6bGliLHBpcCx1cmxsaWINCnRyeToNCiAgICAgICAgaW1wb3J0IG9zLHJlcXVlc3RzLGpzb24sdGltZSxyZSxyYW5kb20sc3lzLHV1aWQsc3RyaW5nLHN1YnByb2Nlc3MNCiAgICAgICAgZnJvbSBzdHJpbmcgaW1wb3J0ICoNCiAgICAgICAgZnJvbSBjb25jdXJyZW50LmZ1dHVyZXMgaW1wb3J0IFRocmVhZFBvb2xFeGVjdXRvciBhcyB0cmVkDQpleGNlcHQgTW9kdWxlTm90Rm91bmRFcnJvcjoNCiAgICAgICAgb3Muc3lzdGVtKGYncGlwIGluc3RhbGwgcmVxdWVzdHMgZnV0dXJlcz09MiA+IC9kZXYvbnVsbCcpDQpleGNlcHQ6cGFzcw0KZmJrcz0oZidjb20uZmFjZWJvb2suYWRzbWFuYWdlcicsJ2NvbS5mYWNlYm9vay5saXRlJywnY29tLmZhY2Vib29rLm9yY2EnLCdjb20uZmFjZWJvb2sua2F0YW5hJywnY29tLmZhY2Vib29rLm1saXRlJykNCmd0ID0gcmFuZG9tLmNob2ljZShbJ0dULTEwMTUnLCdHVC0xMDIwJywnR1QtMTAzMCcsJ0dULTEwMzUnLCdHVC0xMDQwJywnR1QtMTA0NScsJ0dULTEwNTAnLCdHVC0xMjQwJywnR1QtMTQ0MCcsJ0dULTE0NTAnLCdHVC0xODE5MCcsJ0dULTE4MjYyJywnR1QtMTkwNjBJJywnR1QtMTkwODInLCdHVC0xOTA4MycsJ0dULTE5MTA1JywnR1QtMTkxNTInLCdHVC0xOTE5MicsJ0dULTE5MzAwJywnR1QtMTk1MDUnLCdHVC0yMDAwJywnR1QtMjAwMDAnLCdHVC0yMDBzJywnR1QtMzAwMCcsJ0dULTQxNFhPUCcsJ0dULTY5MTgnLCdHVC03MDEwJywnR1QtNzAyMCcsJ0dULTcwMzAnLCdHVC03MDQwJywnR1QtNzA1MCcsJ0dULTcxMDAnLCdHVC03MTA1JywnR1QtNzExMCcsJ0dULTcyMDUnLCdHVC03MjEwJywnR1QtNzI0MFInLCdHVC03MjQ1JywnR1QtNzMwMycsJ0dULTczMTAnLCdHVC03MzIwJywnR1QtNzMyNScsJ0dULTczMjYnLCdHVC03MzQwJywnR1QtNzQwNScsJ0dULTc1NTAgICA1R1QtODAwNScsJ0dULTgwMTAnLCdHVC04MScsJ0dULTgxMCcsJ0dULTgxMDUnLCdHVC04MTEwJywnR1QtODIyMFMnLCdHVC04NDEwJywnR1QtOTMwMCcsJ0dULTkzMjAnLCdHVC05M0cnLCdHVC1BNzEwMCcsJ0dULUE5NTAwJywnR1QtQU5EUk9JRCcsJ0dULUIyNzEwJywnR1QtQjUzMzAnLCdHVC1CNTMzMEInLCdHVC1CNTMzMEwnLCdHVC1CNTMzMFpLQUlOVScsJ0dULUI1NTEwJywnR1QtQjU1MTInLCdHVC1CNTcyMicsJ0dULUI3NTEwJywnR1QtQjc3MjInLCdHVC1CNzgxMCcsJ0dULUI5MTUwJywnR1QtQjkzODgnLCdHVC1DMzAxMCcsJ0dULUMzMjYyJywnR1QtQzMzMTBSJywnR1QtQzMzMTInLCdHVC1DMzMxMlInLCdHVC1DMzMxM1QnLCdHVC1DMzMyMicsJ0dULUMzMzIyaScsJ0dULUMzNTIwJywnR1QtQzM1MjBJJywnR1QtQzM1OTInLCdHVC1DMzU5NScsJ0dULUMzNzgyJywnR1QtQzY3MTInLCdHVC1FMTI4MlQnLCdHVC1FMTUwMCcsJ0dULUUyMjAwJywnR1QtRTIyMDInLCdHVC1FMjI1MCcsJ0dULUUyMjUyJywnR1QtRTI2MDAnLCdHVC1FMjY1MlcnLCdHVC1FMzIxMCcsJ0dULUUzMzA5JywnR1QtRTMzMDlJJywnR1QtRTMzMDlUJywnR1QtRzUzMEgnLCdHVC1nOTAwZicsJ0dULUc5MzBGJywnR1QtSDk1MDAnLCdHVC1JNTUwOCcsJ0dULUk1ODAxJywnR1QtSTY0MTAnLCdHVC1JODE1MCcsJ0dULUk4MTYwT0tMVFBBJywnR1QtSTgxNjBaV0xUVFQnLCdHVC1JODI1OCcsJ0dULUk4MjYyRCcsJ0dULUk4MjY4JywnR1QtSTg1MDUnLCdHVC1JODUzMEJBQUJUVScsJ0dULUk4NTMwQkFMQ0hPJywnR1QtSTg1MzBCQUxUVFQnLCdHVC1JODU1MEUnLCdHVC1pODcwMCcsJ0dULUk4NzUwJywnR1QtSTkwMCcsJ0dULUk5MDA4TCcsJ0dULWk5MDQwJywnR1QtSTkwODBFJywnR1QtSTkwODJDJywnR1QtSTkwODJFV0FJTlUnLCdHVC1JOTA4MmknLCdHVC1JOTEwMEcnLCdHVC1JOTEwMExLTENIVCcsJ0dULUk5MTAwTScsJ0dULUk5MTAwUCcsJ0dULUk5MTAwVCcsJ0dULUk5MTA1VUFOREJUJywnR1QtSTkxMjhFJywnR1QtSTkxMjhJJywnR1QtSTkxMjhWJywnR1QtSTkxNThQJywnR1QtSTkxNThWJywnR1QtSTkxNjhJJywnR1QtSTkxOTJJJywnR1QtSTkxOTVIJywnR1QtSTkxOTVMJywnR1QtSTkyNTAnLCdHVC1JOTMwM0knLCdHVC1JOTMwNU4nLCdHVC1JOTMwOEknLCdHVC1JOTUwNUcnLCdHVC1JOTUwNVgnLCdHVC1JOTUwN1YnLCdHVC1JOTYwMCcsJ0dULW0xOTAnLCdHVC1NNTY1MCcsJ0dULW1pbmknLCdHVC1ONTAwMFMnLCdHVC1ONTEwMCcsJ0dULU41MTA1JywnR1QtTjUxMTAnLCdHVC1ONTEyMCcsJ0dULU43MDAwQicsJ0dULU43MDA1JywnR1QtTjcxMDBUJywnR1QtTjcxMDInLCdHVC1ONzEwNScsJ0dULU43MTA1VCcsJ0dULU43MTA4JywnR1QtTjcxMDhEJywnR1QtTjgwMDAnLCdHVC1OODAwNScsJ0dULU44MDEwJywnR1QtTjgwMjAnLCdHVC1OOTAwMCcsJ0dULU45NTA1JywnR1QtUDEwMDBDV0FYU0EnLCdHVC1QMTAwME0nLCdHVC1QMTAwMFQnLCdHVC1QMTAxMCcsJ0dULVAzMTAwQicsJ0dULVAzMTA1JywnR1QtUDMxMDgnLCdHVC1QMzExMCcsJ0dULVA1MTAwJywnR1QtUDUyMDAnLCdHVC1QNTIxMFhEMScsJ0dULVA1MjIwJywnR1QtUDYyMDAnLCdHVC1QNjIwMEwnLCdHVC1QNjIwMScsJ0dULVA2MjEwJywnR1QtUDYyMTEnLCdHVC1QNjgwMCcsJ0dULVA3MTAwJywnR1QtUDczMDAnLCdHVC1QNzMwMEInLCdHVC1QNzMxMCcsJ0dULVA3MzIwJywnR1QtUDc1MDBEJywnR1QtUDc1MDBNJywnR1QtUDc1MDBSJywnR1QtUDc1MDBWJywnR1QtUDc1MDEnLCdHVC1QNzUxMScsJ0dULVMzMzMwJywnR1QtUzMzMzInLCdHVC1TMzMzMycsJ0dULVMzMzcwJywnR1QtUzM1MTgnLCdHVC1TMzU3MCcsJ0dULVMzNjAwaScsJ0dULVMzNjUwJywnR1QtUzM2NTNXJywnR1QtUzM3NzBLJywnR1QtUzM3NzBNJywnR1QtUzM4MDBXJywnR1QtUzM4MDInLCdHVC1TMzg1MCcsJ0dULVM1MjIwJywnR1QtUzUyMjBSJywnR1QtUzUyMjInLCdHVC1TNTIzMCcsJ0dULVM1MjMwVycsJ0dULVM1MjMzVCcsJ0dULXM1MjMzdycsJ0dULVM1MjUwJywnR1QtUzUyNTMnLCdHVC1zNTI2MCcsJ0dULVM1MjgwJywnR1QtUzUyODInLCdHVC1TNTI4M0InLCdHVC1TNTI5MicsJ0dULVM1MzAwJywnR1QtUzUzMDBMJywnR1QtUzUzMDEnLCdHVC1TNTMwMUInLCdHVC1TNTMwMUwnLCdHVC1TNTMwMicsJ0dULVM1MzAyQicsJ0dULVM1MzAzJywnR1QtUzUzMDNCJywnR1QtUzUzMTAnLCdHVC1TNTMxMEInLCdHVC1TNTMxMEMnLCdHVC1TNTMxMEUnLCdHVC1TNTMxMEcnLCdHVC1TNTMxMEknLCdHVC1TNTMxMEwnLCdHVC1TNTMxME0nLCdHVC1TNTMxME4nLCdHVC1TNTMxMicsJ0dULVM1MzEyQicsJ0dULVM1MzEyQycsJ0dULVM1MzEyTCcsJ0dULVM1MzMwJywnR1QtUzUzNjAnLCdHVC1TNTM2MEInLCdHVC1TNTM2MEwnLCdHVC1TNTM2MFQnLCdHVC1TNTM2MycsJ0dULVM1MzY3JywnR1QtUzUzNjknLCdHVC1TNTM4MCcsJ0dULVM1MzgwRCcsJ0dULVM1NTAwJywnR1QtUzU1NjAnLCdHVC1TNTU2MGknLCdHVC1TNTU3MEInLCdHVC1TNTU3MEknLCdHVC1TNTU3MEwnLCdHVC1TNTU3OCcsJ0dULVM1NjAwJywnR1QtUzU2MDMnLCdHVC1TNTYxMCcsJ0dULVM1NjEwSycsJ0dULVM1NjExJywnR1QtUzU2MjAnLCdHVC1TNTY3MCcsJ0dULVM1NjcwQicsJ0dULVM1NjcwSEtCWlRBJywnR1QtUzU2OTAnLCdHVC1TNTY5MFInLCdHVC1TNTgzMCcsJ0dULVM1ODMwRCcsJ0dULVM1ODMwRycsJ0dULVM1ODMwaScsJ0dULVM1ODMwTCcsJ0dULVM1ODMwTScsJ0dULVM1ODMwVCcsJ0dULVM1ODMwVicsJ0dULVM1ODMxaScsJ0dULVM1ODM4JywnR1QtUzU4MzlpJywnR1QtUzYwMTAnLCdHVC1TNjAxMEJCQUJUVScsJ0dULVM2MDEyJywnR1QtUzYwMTJCJywnR1QtUzYxMDInLCdHVC1TNjEwMkInLCdHVC1TNjI5M1QnLCdHVC1TNjMxMEInLCdHVC1TNjMxMFpXQU1JRCcsJ0dULVM2MzEyJywnR1QtUzYzMTNUJywnR1QtUzYzNTInLCdHVC1TNjUwMCcsJ0dULVM2NTAwRCcsJ0dULVM2NTAwTCcsJ0dULVM2NzkwJywnR1QtUzY3OTBMJywnR1QtUzY3OTBOJywnR1QtUzY3OTJMJywnR1QtUzY4MDAnLCdHVC1TNjgwMEhLQVhGQScsJ0dULVM2ODAyJywnR1QtUzY4MTAnLCdHVC1TNjgxMEInLCdHVC1TNjgxMEUnLCdHVC1TNjgxMEwnLCdHVC1TNjgxME0nLCdHVC1TNjgxME1CQVNFUicsJ0dULVM2ODEwUCcsJ0dULVM2ODEyJywnR1QtUzY4MTJCJywnR1QtUzY4MTJDJywnR1QtUzY4MTJpJywnR1QtUzY4MTgnLCdHVC1TNjgxOFYnLCdHVC1TNzIzMEUnLCdHVC1TNzIzM0UnLCdHVC1TNzI1MEQnLCdHVC1TNzI2MicsJ0dULVM3MjcwJywnR1QtUzcyNzBMJywnR1QtUzcyNzInLCdHVC1TNzI3MkMnLCdHVC1TNzI3M1QnLCdHVC1TNzI3OCcsJ0dULVM3Mjc4VScsJ0dULVM3MzkwJywnR1QtUzczOTBHJywnR1QtUzczOTBMJywnR1QtUzczOTInLCdHVC1TNzM5MkwnLCdHVC1TNzUwMCcsJ0dULVM3NTAwQUJBQlRVJywnR1QtUzc1MDBBQkFEQlQnLCdHVC1TNzUwMEFCVFRMUCcsJ0dULVM3NTAwQ1dBREJUJywnR1QtUzc1MDBMJywnR1QtUzc1MDBUJywnR1QtUzc1NjAnLCdHVC1TNzU2ME0nLCdHVC1TNzU2MicsJ0dULVM3NTYyQycsJ0dULVM3NTYyaScsJ0dULVM3NTYyTCcsJ0dULVM3NTY2JywnR1QtUzc1NjgnLCdHVC1TNzU2OEknLCdHVC1TNzU3MicsJ0dULVM3NTgwRScsJ0dULVM3NTgzVCcsJ0dULVM3NThYJywnR1QtUzc1OTInLCdHVC1TNzcxMCcsJ0dULVM3NzEwTCcsJ0dULVM3ODk4JywnR1QtUzc4OThJJywnR1QtUzg1MDAnLCdHVC1TODUzMCcsJ0dULVM4NjAwJywnR1QtU1RCOTE5JywnR1QtVDE0MCcsJ0dULVQxNTAnLCdHVC1WOGEnLCdHVC1WOGknLCdHVC1WQzgxOCcsJ0dULVZNOTE5UycsJ0dULVcxMzEnLCdHVC1XMTUzJywnR1QtWDgzMScsJ0dULVg4NTMnLCdHVC1YODcwJywnR1QtWDg5MCcsJ0dULVk4NzUwJ10pDQp4eHh4eD0oZiJHVC0xMDE1IiwiR1QtMTAyMCIsIkdULTEwMzAiLCJHVC0xMDM1IiwiR1QtMTA0MCIsIkdULTEwNDUiLCJHVC0xMDUwIiwiR1QtMTI0MCIsIkdULTE0NDAiLCJHVC0xNDUwIiwiR1QtMTgxOTAiLCJHVC0xODI2MiIsIkdULTE5MDYwSSIsIkdULTE5MDgyIiwiR1QtMTkwODMiLCJHVC0xOTEwNSIsIkdULTE5MTUyIiwiR1QtMTkxOTIiLCJHVC0xOTMwMCIsIkdULTE5NTA1IiwiR1QtMjAwMCIsIkdULTIwMDAwIiwiR1QtMjAwcyIsIkdULTMwMDAiLCJHVC00MTRYT1AiLCJHVC02OTE4IiwiR1QtNzAxMCIsIkdULTcwMjAiLCJHVC03MDMwIiwiR1QtNzA0MCIsIkdULTcwNTAiLCJHVC03MTAwIiwiR1QtNzEwNSIsIkdULTcxMTAiLCJHVC03MjA1IiwiR1QtNzIxMCIsIkdULTcyNDBSIiwiR1QtNzI0NSIsIkdULTczMDMiLCJHVC03MzEwIiwiR1QtNzMyMCIsIkdULTczMjUiLCJHVC03MzI2IiwiR1QtNzM0MCIsIkdULTc0MDUiLCJHVC03NTUwIDVHVC04MDA1IiwiR1QtODAxMCIsIkdULTgxIiwiR1QtODEwIiwiR1QtODEwNSIsIkdULTgxMTAiLCJHVC04MjIwUyIsIkdULTg0MTAiLCJHVC05MzAwIiwiR1QtOTMyMCIsIkdULTkzRyIsIkdULUE3MTAwIiwiR1QtQTk1MDAiLCJHVC1BTkRST0lEIiwiR1QtQjI3MTAiLCJHVC1CNTMzMCIsIkdULUI1MzMwQiIsIkdULUI1MzMwTCIsIkdULUI1MzMwWktBSU5VIiwiR1QtQjU1MTAiLCJHVC1CNTUxMiIsIkdULUI1NzIyIiwiR1QtQjc1MTAiLCJHVC1CNzcyMiIsIkdULUI3ODEwIiwiR1QtQjkxNTAiLCJHVC1COTM4OCIsIkdULUMzMDEwIiwiR1QtQzMyNjIiLCJHVC1DMzMxMFIiLCJHVC1DMzMxMiIsIkdULUMzMzEyUiIsIkdULUMzMzEzVCIsIkdULUMzMzIyIiwiR1QtQzMzMjJpIiwiR1QtQzM1MjAiLCJHVC1DMzUyMEkiLCJHVC1DMzU5MiIsIkdULUMzNTk1IiwiR1QtQzM3ODIiLCJHVC1DNjcxMiIsIkdULUUxMjgyVCIsIkdULUUxNTAwIiwiR1QtRTIyMDAiLCJHVC1FMjIwMiIsIkdULUUyMjUwIiwiR1QtRTIyNTIiLCJHVC1FMjYwMCIsIkdULUUyNjUyVyIsIkdULUUzMjEwIiwiR1QtRTMzMDkiLCJHVC1FMzMwOUkiLCJHVC1FMzMwOVQiLCJHVC1HNTMwSCIsIkdULUc5MzBGIiwiR1QtSDk1MDAiLCJHVC1JNTUwOCIsIkdULUk1ODAxIiwiR1QtSTY0MTAiLCJHVC1JODE1MCIsIkdULUk4MTYwT0tMVFBBIiwiR1QtSTgxNjBaV0xUVFQiLCJHVC1JODI1OCIsIkdULUk4MjYyRCIsIkdULUk4MjY4IiJHVC1JODUwNSIsIkdULUk4NTMwQkFBQlRVIiwiR1QtSTg1MzBCQUxDSE8iLCJHVC1JODUzMEJBTFRUVCIsIkdULUk4NTUwRSIsIkdULUk4NzUwIiwiR1QtSTkwMCIsIkdULUk5MDA4TCIsIkdULUk5MDgwRSIsIkdULUk5MDgyQyIsIkdULUk5MDgyRVdBSU5VIiwiR1QtSTkwODJpIiwiR1QtSTkxMDBHIiwiR1QtSTkxMDBMS0xDSFQiLCJHVC1JOTEwME0iLCJHVC1JOTEwMFAiLCJHVC1JOTEwMFQiLCJHVC1JOTEwNVVBTkRCVCIsIkdULUk5MTI4RSIsIkdULUk5MTI4SSIsIkdULUk5MTI4ViIsIkdULUk5MTU4UCIsIkdULUk5MTU4ViIsIkdULUk5MTY4SSIsIkdULUk5MTkwIiwiR1QtSTkxOTIiLCJHVC1JOTE5MkkiLCJHVC1JOTE5NUgiLCJHVC1JOTE5NUwiLCJHVC1JOTI1MCIsIkdULUk5MzAwIiwiR1QtSTkzMDBJIiwiR1QtSTkzMDFJIiwiR1QtSTkzMDNJIiwiR1QtSTkzMDVOIiwiR1QtSTkzMDhJIiwiR1QtSTk1MDAiLCJHVC1JOTUwNUciLCJHVC1JOTUwNVgiLCJHVC1JOTUwN1YiLCJHVC1JOTYwMCIsIkdULU01NjUwIiwiR1QtTjUwMDBTIiwiR1QtTjUxMDAiLCJHVC1ONTEwNSIsIkdULU41MTEwIiwiR1QtTjUxMjAiLCJHVC1ONzAwMEIiLCJHVC1ONzAwNSIsIkdULU43MTAwIiwiR1QtTjcxMDBUIiwiR1QtTjcxMDIiLCJHVC1ONzEwNSIsIkdULU43MTA1VCIsIkdULU43MTA4IiwiR1QtTjcxMDhEIiwiR1QtTjgwMDAiLCJHVC1OODAwNSIsIkdULU44MDEwIiwiR1QtTjgwMjAiLCJHVC1OOTAwMCIsIkdULU45NTA1IiwiR1QtUDEwMDBDV0FYU0EiLCJHVC1QMTAwME0iLCJHVC1QMTAwMFQiLCJHVC1QMTAxMCIsIkdULVAzMTAwQiIsIkdULVAzMTA1IiwiR1QtUDMxMDgiLCJHVC1QMzExMCIsIkdULVA1MTAwIiwiR1QtUDUxMTAiLCJHVC1QNTIwMCIsIkdULVA1MjEwIiwiR1QtUDUyMTBYRDEiLCJHVC1QNTIyMCIsIkdULVA2MjAwIiwiR1QtUDYyMDBMIiwiR1QtUDYyMDEiLCJHVC1QNjIxMCIsIkdULVA2MjExIiwiR1QtUDY4MDAiLCJHVC1QNzEwMCIsIkdULVA3MzAwIiwiR1QtUDczMDBCIiwiR1QtUDczMTAiLCJHVC1QNzMyMCIsIkdULVA3NTAwRCIsIkdULVA3NTAwTSIsIlNBTVNVTkciLCJMTVk0IiwiTE1ZNDdWIiwiTU1CMjlLIiwiTU1CMjlNIiwiTFJYMjJDIiwiTFJYMjJHIiwiTk1GMiIsIk5NRjI2WCIsIk5NRjI2WDsiLCJOUkQ5ME0iLCJOUkQ5ME07IiwiU1BILUw3MjAiLCJJTUw3NEsiLCJJTU03NkQiLCJKRFEzOSIsIkpTUzE1SiIsIkpaTzU0SyIsIktPVDQiLCJLT1Q0OUgiLCJLT1Q0U00tVDMxMCIsIktUVTg0UCIsIlNNLUE1MDBGIiwiU00tQTUwMEZVIiwiU00tQTUwMEgiLCJTTS1HNTMyRiIsIlNNLUc5MDBGIiwiU00tRzkyMEYiLCJTTS1HOTMwRiIsIlNNLUc5MzUiLCJTTS1HOTUwRiIsIlNNLUozMjBGIiwiU00tSjMyMEZOIiwiU00tSjMyMEgiLCJTTS1KMzIwTSIsIlNNLUo1MTBGTiIsIlNNLUo3MDFGIiwiU00tTjkyMFMiLCJTTS1UMTExIiwiU00tVDIzMCIsIlNNLVQyMzEiLCJTTS1UMjM1IiwiU00tVDI4MCIsIlNNLVQzMTEiLCJTTS1UMzE1IiwiU00tVDUyNSIsIlNNLVQ1MzEiLCJTTS1UNTM1IiwiU00tVDU1NSIsIlNNLVQ1NjEiLCJTTS1UNzA1IiwiU00tVDgwNSIsIlNNLVQ4MjAiKQ0KdGFuPSgnaHR0cHMnKQ0KaXlhPSgnZ2l0aHViJykNCmFuaT0oJ0Zhcml5YScpDQpsb3ZlPSgnbWJhc2ljJykNCnVnZW49W10NCnVnZW49W10NCnVzZXJhZ2VudD1bXQ0KZm9yIHhkIGluIHJhbmdlKDEwMDAwKToNCiAgICAgICAgYWE9J01vemlsbGEvNS4wIChMaW51eDsgVTsgQW5kcm9pZCcNCiAgICAgICAgYj1yYW5kb20uY2hvaWNlKFsnNicsJzcnLCc4JywnOScsJzEwJywnMTEnLCcxMicsJzEzJ10pDQogICAgICAgIGM9ZicgVEwtdGw7IHtzdHIoZ3QpfScNCiAgICAgICAgZz0nQXBwbGVXZWJLaXQvNTM3LjM2IChLSFRNTCwgbGlrZSBHZWNrbykgQ2hyb21lLycNCiAgICAgICAgaD1yYW5kb20ucmFuZHJhbmdlKDczLDEwMCkNCiAgICAgICAgaT0nMCcNCiAgICAgICAgaj1yYW5kb20ucmFuZHJhbmdlKDQyMDAsNDkwMCkNCiAgICAgICAgaz1yYW5kb20ucmFuZHJhbmdlKDQwLDE1MCkNCiAgICAgICAgbD0nTW9iaWxlIFNhZmFyaS81MzcuMzYnDQogICAgICAgIHVha3UyPWYne2FhfSB7Yn07IHtjfSkge2d9e2h9LntpfS57an0ue2t9IHtsfScNCiAgICAgICAgdWdlbi5hcHBlbmQodWFrdTIpDQpmb3IgYWdlbnQgaW4gcmFuZ2UoMTAwMDApOg0KICAgICAgICBhYT0nTW96aWxsYS81LjAgKExpbnV4OyBBbmRyb2lkIDYuMC4xOycNCiAgICAgICAgYj1yYW5kb20uY2hvaWNlKFsnNicsJzcnLCc4JywnOScsJzEwJywnMTEnLCcxMiddKQ0KICAgICAgICBjPSdlbi11czsgMTA7IFQtTW9iaWxlIG15VG91Y2ggM0cgU2xpZGUgQnVpbGQvJw0KICAgICAgICBkPXJhbmRvbS5jaG9pY2UoWydBJywnQicsICdDJywgJ0QnLCAnRScsICdGJywgJ0cnLCAnSCcsICdJJywgJ0onLCAnSycsICdMJywgJ00nLCAnTicsICdPJywgJ1AnLCAnUScsICdSJywgJ1MnLCAnVCcsICdVJywgJ1YnLCAnVycsICdYJywgJ1knLCAnWiddKQ0KICAgICAgICBlPXJhbmRvbS5yYW5kcmFuZ2UoMSwgOTk5KQ0KICAgICAgICBmPXJhbmRvbS5jaG9pY2UoWydBJywnQicsICdDJywgJ0QnLCAnRScsICdGJywgJ0cnLCAnSCcsICdJJywgJ0onLCAnSycsICdMJywgJ00nLCAnTicsICdPJywgJ1AnLCAnUScsICdSJywgJ1MnLCAnVCcsICdVJywgJ1YnLCAnVycsICdYJywgJ1knLCAnWiddKQ0KICAgICAgICBnPSdBcHBsZVdlYktpdC81MzcuMzYgKEtIVE1MLCBsaWtlIEdlY2tvKSBDaHJvbWUvODkuMC40Mzg5Ljk5Jw0KICAgICAgICBoPXJhbmRvbS5yYW5kcmFuZ2UoNzMsMTAwKQ0KICAgICAgICBpPScwJw0KICAgICAgICBqPXJhbmRvbS5yYW5kcmFuZ2UoNDIwMCw0OTAwKQ0KICAgICAgICBrPXJhbmRvbS5yYW5kcmFuZ2UoNDAsMTUwKQ0KICAgICAgICBsPSdNb2JpbGUgU2FmYXJpLzUzMy4xJw0KICAgICAgICBmdWxsYWdudD0oZid7YWF9IHtifTsge2N9e2R9e2V9e2Z9KSB7Z317aH0ue2l9LntqfS57a30ge2x9JykNCiAgICAgICAgdWdlbi5hcHBlbmQoZnVsbGFnbnQpDQpmb3IgeCBpbiByYW5nZSgxMDAwMCk6DQoJYWE9J01vemlsbGEvNS4wIChXaW5kb3dzIE5UIDYuMTsgV09XNjQpJw0KCWI9cmFuZG9tLmNob2ljZShbJzQnLCc1JywnNicsJzcnLCc4JywnOScsJzEwJywnMTEnLCcxMiddKQ0KCWM9J0FTVVNfSTAwNkQgQnVpbGQvUktRMS4yMDEwMjIuMDAyJw0KCWQ9cmFuZG9tLmNob2ljZShbJ0EnLCdCJywgJ0MnLCAnRCcsICdFJywgJ0YnLCAnRycsICdIJywgJ0knLCAnSicsICdLJywgJ0wnLCAnTScsICdOJywgJ08nLCAnUCcsICdRJywgJ1InLCAnUycsICdUJywgJ1UnLCAnVicsICdXJywgJ1gnLCAnWScsICdaJ10pDQoJZT1yYW5kb20ucmFuZHJhbmdlKDEsIDk5OSkNCglmPXJhbmRvbS5jaG9pY2UoWydBJywnQicsICdDJywgJ0QnLCAnRScsICdGJywgJ0cnLCAnSCcsICdJJywgJ0onLCAnSycsICdMJywgJ00nLCAnTicsICdPJywgJ1AnLCAnUScsICdSJywgJ1MnLCAnVCcsICdVJywgJ1YnLCAnVycsICdYJywgJ1knLCAnWiddKQ0KCWc9J0FwcGxlV2ViS2l0LzUzNy4zNiAoS0hUTUwsIHNlcGVydGkgR2Vja28pIENocm9tZS81NS4wLjI4ODMuODcgU2FmYXJpLzUzNy4zNiBTbGVpcG5pci82LjIuMycNCgloPXJhbmRvbS5yYW5kcmFuZ2UoNzMsMTAwKQ0KCWk9JzAnDQoJaj1yYW5kb20ucmFuZHJhbmdlKDQyMDAsNDkwMCkNCglrPXJhbmRvbS5yYW5kcmFuZ2UoNDAsMTUwKQ0KCWw9J01vYmlsZSBTYWZhcmkvNTM3LjM2IFNsZWlwbmlyLzMuNS4yOCcNCgl1YWt1YT1mJ3thYX0ge2J9OyB7Y317ZH17ZX17Zn0pIHtnfXtofS57aX0ue2p9LntrfSB7bH0nDQoJdXNlcmFnZW50LmFwcGVuZCh1YWt1YSkNCg0KY291bnR5PSgnUEhJTElQUElORVMnKQ0KDQpsb2dvPSgiIiIgDQoNClwwMzNbMTszNm3ilojilojilojilojilojiloggIOKWiOKWiOKWiOKWiOKWiOKWiOKWiCDilojiloggICDilojilogg4paI4paI4paI4paI4paI4paI4paI4paIIOKWiOKWiOKWiOKWiOKWiOKWiOKWiCDilojilojilojilojilojiloggIA0KXDAzM1sxOzM2beKWiOKWiCAgIOKWiOKWiCDilojiloggICAgICAg4paI4paIIOKWiOKWiCAgICAg4paI4paIICAgIOKWiOKWiCAgICAgIOKWiOKWiCAgIOKWiOKWiCANClwwMzNbMTszNm3ilojiloggICDilojilogg4paI4paI4paI4paI4paIICAgICDilojilojiloggICAgICDilojiloggICAg4paI4paI4paI4paI4paIICAg4paI4paI4paI4paI4paI4paIICANClwwMzNbMTszNm3ilojiloggICDilojilogg4paI4paIICAgICAgIOKWiOKWiCDilojiloggICAgIOKWiOKWiCAgICDilojiloggICAgICDilojiloggICDilojiloggDQpcMDMzWzE7MzZt4paI4paI4paI4paI4paI4paIICDilojilojilojilojilojilojilogg4paI4paIICAg4paI4paIICAgIOKWiOKWiCAgICDilojilojilojilojilojilojilogg4paI4paIICAg4paI4paIIA0KXDAzM1sxOzMxbeKWreKWrOKWreKWrOKWreKWrOKWreKWrOKWreKWrOKWreKWrOKWreKWrOKWreKWrOKWreKWrOKWreKWrOKWreKWrOKWreKWrOKWreKWrOKWreKWrOKWreKWrOKWreKWrOKWreKWrOKWreKWrOKWreKWrOKWreKWrOKWreKWrOKWreKWrOKWreKWrOKWrQ0KXDAzM1sxOzMzbSAgICAgW1wwMzNbMTszMW1EXVwwMzNbMTszN20gVE9PTCBOQU1FICAgICAgICAgIDogICBERVhURVINClwwMzNbMTszMW0gICAgIFtcMDMzWzE7MzJtRV1cMDMzWzE7MzdtIFRPT0wgT1dORVIgICAgICAgICA6ICAgQUxFWEFOREVSIFVSTFVWICYgWEhBTiBLQVRaDQpcMDMzWzE7MzVtICAgICBbXDAzM1sxOzMzbVhdXDAzM1sxOzM3bSBUT09MIFNZU1RFTSAgICAgICAgOiAgIERBVEEgJiBXSUZJDQpcMDMzWzE7MzZtICAgICBbXDAzM1sxOzM0bVRdXDAzM1sxOzM3bSBUT09MIFRZUEUgICAgICAgICAgOiAgIFBSSVZBVEUNClwwMzNbMTszNG0gICAgIFtcMDMzWzE7MzVtRV1cMDMzWzE7MzdtIFRPT0wgU1RBVFVTICAgICAgICA6ICAgRlJFRQ0KXDAzM1sxOzMybSAgICAgW1wwMzNbMTszNm1SXVwwMzNbMTszN20gVE9PTCBWRVJTSU9OICAgICAgIDogICA0LjANClwwMzNbMTszNm3ilq3ilqzilq3ilqzilq3ilqzilq3ilqzilq3ilqzilq3ilqzilq3ilqzilq3ilqzilq3ilqzilq3ilqzilq3ilqzilq3ilqzilq3ilqzilq3ilqzilq3ilqzilq3ilqzilq3ilqzilq3ilqzilq3ilqzilq3ilqzilq3ilqzilq3ilqzilq3ilqzilq0iIiIpDQpkZWYgY2xlYXIoKToNCiAgICAgICAgb3Muc3lzdGVtKGYnY2xlYXInKQ0KICAgICAgICBwcmludChsb2dvKQ0KDQpBID0gJ1x4MWJbMTs5N20nDQpCID0gJ1x4MWJbMTs5Nm0nDQpDID0gJ1x4MWJbMTs5MW0nDQpEID0gJ1x4MWJbMTs5Mm0nDQpNID0gJ1wwMzNbMTszMW0nDQpIID0gJ1wwMzNbMTszMm0nDQpOID0gJ1x4MWJbMTszN20nDQpFID0gJ1x4MWJbMTs5M20nDQpGID0gJ1x4MWJbMTs5NG0nDQpHID0gJ1x4MWJbMTs5NW0nDQpQID0gJ1wwMzNbMTszN20nDQoNCmxvb3A9MA0Kb2tzPVtdDQpjcHM9W10NCnBjcD1bXQ0KaWQ9W10NCnRva2Vua3U9W10NCiNfX19fX19fX19bIE1PRFVMRVMgQ0xFQVIgXV9fX19fXyMNCmNsZWFyKCkgDQojX19fX19fX19fWyBMT0dJTiBVU0VSTkFNRSBBTkQgUEFTU1dPUkQgXV9fX19fXyMNCmltcG9ydCBnZXRwYXNzDQphdHRlbXBzID0gMA0KDQp3aGlsZSBhdHRlbXBzIDwgMTIzNDU2Nzc5MDE6DQogICAgdXNlcm5hbWUgPSBpbnB1dCgnIFwwMzNbOTc7MW1FTlRFUiBVU0VSTkFNRTogJykNCiAgICBwYXNzd29yZCA9IGlucHV0KCcgXDAzM1s5NzsxbUVOVEVSIFBBU1NXT1JEOiAnKQ0KDQogICAgaWYgdXNlcm5hbWUgPT0gJ0RFWFRFUicgYW5kIHBhc3N3b3JkID09ICdGUkVFJzoNCiAgICAgICAgcHJpbnQoJyBcMDMzWzA7OTJtWU9VIEhBVkUgU1VDQ0VTU0ZVTExZIExPR0dFRCBJTi4nKQ0KICAgICAgICBicmVhaw0KICAgIGVsc2U6DQogICAgICAgIHByaW50KCcgSU5DT1JSRUNUIFBBU1NXT1JEIFBMRUFTRSBUUlkgQUdBSU4gQlkgQUxFWEFOREVSJykNCiAgICAgICAgYXR0ZW1wcyArPSA1DQogICAgICAgIGNvbnRpbnVlCQ0KZGVmIG1lbnUoKToNCgljbGVhcigpDQoJcHJpbnQoZiIgWzFdIEZJTEUgQ1JBQ0siKQ0KCXByaW50KGYiIFswXSBFWElUIikNCgltZT1pbnB1dChmJ1xuIFs/XSBDSE9PU0UgOiAnKQ0KCWlmIG1lIGluIFsiMSIsICIwMSIsIjExIiwiQSIsImEiXToNCgkJY2xlYXIoKQ0KCQlmaWxlID0gaW5wdXQoZicgWz9dIFBVVCBGSUxFIFBBVEhcMDMzWzE7MzdtOiAnKQ0KCQl0cnk6DQoJCQlmbyA9IG9wZW4oZmlsZSwncicpLnJlYWQoKS5zcGxpdGxpbmVzKCkNCgkJZXhjZXB0IEZpbGVOb3RGb3VuZEVycm9yOg0KCQkJcHJpbnQoZicgWyFdIEZJTEUgTE9DQVRJT04gTk9UIEZPVU5EICcpDQoJCQlleGl0KCkNCgkJb3Muc3lzdGVtKCdjbGVhcicpDQoJCXByaW50KGxvZ28pO3ByaW50KCcgXDAzM1sxOzMybVtBXVwwMzNbMTszM21bTF1cMDMzWzE7MzRtW0xdXDAzM1sxOzM1bVtNXVwwMzNbMTszNm1bRV1cMDMzWzE7MzJtW1RdXDAzM1sxOzMzbVtIXVwwMzNbMTszNG1bT11cMDMzWzE7MzVtW0RdXDAzM1sxOzM2bVtXXVwwMzNbMTszMm1bT11cMDMzWzE7MzNtW1JdXDAzM1sxOzM0bVtLXVwwMzNbMTszNW1bSV1cMDMzWzE7MzZtW05dXDAzM1sxOzMybVtHXSBcMDMzWzE7MzdtJykNCgkJcHJpbnQoZicgWzFdIE1FVEhPRCAxIFxuIFsyXSBNRVRIT0QgMiBcbiBbM10gTUVUSE9EIDMgXG4gWzRdIE1FVEhPRCA0IFxuIFs1XSBNRVRIT0QgNSBcbiBbNl0gTUVUSE9EIDYgXG4gWzddIE1FVEhPRCA3IFxuIFs4XSBNRVRIT0QgOCBcbiBbOV0gTUVUSE9EIDkgXG4gWzEwXSBNRVRIT0QgMTAgXG4gWzExXSBNRVRIT0QgMTEgJykNCgkJbXRoZD1pbnB1dChmJ1xuIFs/XSBDSE9PU0UgOiAnKQ0KCQlwbGlzdD1bXQ0KCQl0cnk6DQoJCQlwc19saW1pdCA9IGludChpbnB1dChmJ1xuIFs/XSBIT1cgTUFOWSBQQVNTV09SRFMgRE8gWU9VIFdBTlQgVE8gQUREID8gOiAnKSkNCgkJZXhjZXB0Og0KCQkJcHNfbGltaXQgPTENCgkJb3Muc3lzdGVtKCdjbGVhcicpDQoJCXByaW50KGxvZ28pDQoJCXByaW50KGYnXDAzM1sxOzMybSBbK10gRVhBTVBMRSA6IGZpcnN0IGxhc3QsZmlydHNsYXN0LGZpcnN0MTIzXG4nKQ0KCQlmb3IgaSBpbiByYW5nZShwc19saW1pdCk6DQoJCQlwbGlzdC5hcHBlbmQoaW5wdXQoZicgWz9dIFBVVCBZT1VSIFBBU1NMSVNUIHtpKzF9OiAnKSkNCgkgDQoJCWN4PWlucHV0KGYnXG4gWz9dIERPIFlPVSBXRU5UIFNIT1cgQ1AgQUNDT1VOVD8gKHkvbik6ICcpDQoJCWlmIGN4IGluIFsnbicsJ04nLCdubycsJ05PJywnMiddOg0KCQkJcGNwLmFwcGVuZChmJ24nKQ0KCQllbHNlOg0KCQkJcGNwLmFwcGVuZChmJ3knKQ0KCQl3aXRoIHRyZWQobWF4X3dvcmtlcnM9MzApIGFzIGNyYWNrX3N1Ym1pdDoNCgkJCWNsZWFyKCkNCgkJCXRvdGFsX2lkcyA9IHN0cihsZW4oZm8pKQ0KCQkJcHJpbnQoZicgVE9UQUwgQUNDT1VOVCA6IFwwMzNbMTszMm0nK3RvdGFsX2lkcytmJ1wwMzNbMTszN20nKQ0KCQkJcHJpbnQoZidcMDMzWzE7MzNtIFBBU1NXT1JEIDogXDAzM1sxOzM3bXtwc19saW1pdH0nKQ0KCQkJcHJpbnQoZidcMDMzWzE7MzZtIE1FVEhPRCAgOiBcMDMzWzE7MzdtTXttdGhkfScpDQoJCQlwcmludChmJ1wwMzNbMTszNm3ilq3ilqzilq3ilqzilq3ilqzilq3ilqzilq3ilqzilq3ilqzilq3ilqzilq3ilqzilq3ilqzilq3ilqzilq3ilqzilq3ilqzilq3ilqzilq3ilqzilq3ilqzilq3ilqzilq3ilqzilq3ilqzilq3ilqzilq3ilqzilq3ilqzilq3ilqzilq3ilqzilq0nKQ0KCQkJcHJpbnQoZidcMDMzWzE7MzJtIExJVkUgQUNDT1VOVCBJRCBBTkQgQ09PS0lFUyBJTiBTQVZFIDonKQ0KCQkJcHJpbnQoZidcMDMzWzE7MzdtIC9zZGNhcmQvREVYVEVSLUxJVkUudHh0JykNCgkJCXByaW50KGYnXDAzM1sxOzM3bSAvc2RjYXJkL0RFWFRFUi1MSVZFLUNPT0tJRS1NRVRIT0QudHh0JykNCgkJCXByaW50KGYiXDAzM1sxOzM3bSBVU0UgRkxJR0hUIE1PREUgRk9SIFNQRUVEIFVQXDAzM1sxOzM3bSIpDQoJCQlwcmludChmJ1wwMzNbMTszNm3ilq3ilqzilq3ilqzilq3ilqzilq3ilqzilq3ilqzilq3ilqzilq3ilqzilq3ilqzilq3ilqzilq3ilqzilq3ilqzilq3ilqzilq3ilqzilq3ilqzilq3ilqzilq3ilqzilq3ilqzilq3ilqzilq3ilqzilq3ilqzilq3ilqzilq3ilqzilq3ilqzilq0nKQ0KCQkJcHJpbnQoZidcMDMzWzE7MzJtIENPVU5UWSA6IHtjb3VudHl9JykNCgkJCXByaW50KGYnXDAzM1sxOzM2beKWreKWrOKWreKWrOKWreKWrOKWreKWrOKWreKWrOKWreKWrOKWreKWrOKWreKWrOKWreKWrOKWreKWrOKWreKWrOKWreKWrOKWreKWrOKWreKWrOKWreKWrOKWreKWrOKWreKWrOKWreKWrOKWreKWrOKWreKWrOKWreKWrOKWreKWrOKWreKWrOKWrScpDQoJCQlmb3IgdXNlciBpbiBmbzoNCgkJCQlpZHMsbmFtZXMgPSB1c2VyLnNwbGl0KGYnfCcpDQoJCQkJcGFzc2xpc3QgPSBwbGlzdA0KCQkJCWlmIG10aGQgaW4gWycxJywnMDEnXToNCgkJCQkJY3JhY2tfc3VibWl0LnN1Ym1pdChNMSxpZHMsbmFtZXMscGFzc2xpc3QpDQoJCQkJZWxpZiBtdGhkIGluIFsnMicsJzAyJ106DQoJCQkJCWNyYWNrX3N1Ym1pdC5zdWJtaXQoTTIsaWRzLG5hbWVzLHBhc3NsaXN0KQ0KCQkJCWVsaWYgbXRoZCBpbiBbJzMnLCcwMyddOg0KCQkJCQljcmFja19zdWJtaXQuc3VibWl0KE0zLGlkcyxuYW1lcyxwYXNzbGlzdCkNCgkJCQllbGlmIG10aGQgaW4gWyc0JywnMDQnXToNCgkJCQkJY3JhY2tfc3VibWl0LnN1Ym1pdChNNCxpZHMsbmFtZXMscGFzc2xpc3QpDQoJCQkJZWxpZiBtdGhkIGluIFsnNScsJzA1J106DQoJCQkJCWNyYWNrX3N1Ym1pdC5zdWJtaXQoTTUsaWRzLG5hbWVzLHBhc3NsaXN0KQ0KCQkJCWVsaWYgbXRoZCBpbiBbJzYnLCcwNiddOg0KCQkJCQljcmFja19zdWJtaXQuc3VibWl0KE02LGlkcyxuYW1lcyxwYXNzbGlzdCkNCgkJCQllbGlmIG10aGQgaW4gWyc3JywnMDcnXToNCgkJCQkJY3JhY2tfc3VibWl0LnN1Ym1pdChNNyxpZHMsbmFtZXMscGFzc2xpc3QpDQoJCQkJZWxpZiBtdGhkIGluIFsnOCcsJzA4J106DQoJCQkJCWNyYWNrX3N1Ym1pdC5zdWJtaXQoTTgsaWRzLG5hbWVzLHBhc3NsaXN0KQ0KCQkJCWVsaWYgbXRoZCBpbiBbJzknLCcwOSddOg0KCQkJCQljcmFja19zdWJtaXQuc3VibWl0KE05LGlkcyxuYW1lcyxwYXNzbGlzdCkNCgkJCQllbGlmIG10aGQgaW4gWycxMCcsJzEwJ106DQoJCQkJCWNyYWNrX3N1Ym1pdC5zdWJtaXQoTTEwLGlkcyxuYW1lcyxwYXNzbGlzdCkNCgkJCQllbHNlOg0KCQkJCQljcmFja19zdWJtaXQuc3VibWl0KE0xMSxpZHMsbmFtZXMscGFzc2xpc3QpDQpkZWYgTTEoaWRzLG5hbWVzLHBhc3NsaXN0KToNCiAgICAgICAgZ2xvYmFsIGxvb3Asb2tzLGNwcw0KICAgICAgICBzeXMuc3Rkb3V0LndyaXRlKGYnXHJcclwwMzNbMTszN20gW0RFWFRFUi1NMV0gJXN8XDAzM1sxOzMybU9LOi0lcyBcMDMzWzE7MzdtJyUobG9vcCxsZW4ob2tzKSkpO3N5cy5zdGRvdXQuZmx1c2goKQ0KICAgICAgICBzZXNzaW9uID0gcmVxdWVzdHMuU2Vzc2lvbigpDQogICAgICAgIHRyeToNCiAgICAgICAgICAgICAgICBmaXJzdCA9IG5hbWVzLnNwbGl0KGYnICcpWzBdDQogICAgICAgICAgICAgICAgdHJ5Og0KICAgICAgICAgICAgICAgICAgICAgICAgbGFzdCA9IG5hbWVzLnNwbGl0KGYnICcpWzFdDQogICAgICAgICAgICAgICAgZXhjZXB0Og0KICAgICAgICAgICAgICAgICAgICAgICAgbGFzdCA9ICdBaG1lZCcNCiAgICAgICAgICAgICAgICBwcyA9IGZpcnN0Lmxvd2VyKCkNCiAgICAgICAgICAgICAgICBwczIgPSBsYXN0Lmxvd2VyKCkNCiAgICAgICAgICAgICAgICBmb3IgZmlrciBpbiBwYXNzbGlzdDoNCiAgICAgICAgICAgICAgICAgICAgICAgIHBhcyA9IGZpa3IucmVwbGFjZShmJ0ZpcnN0JyxmaXJzdCkucmVwbGFjZShmJ0xhc3QnLGxhc3QpLnJlcGxhY2UoZidmaXJzdCcscHMpLnJlcGxhY2UoZidsYXN0JyxwczIpDQogICAgICAgICAgICAgICAgICAgICAgICB1YT1yYW5kb20uY2hvaWNlKHVnZW4pDQogICAgICAgICAgICAgICAgICAgICAgICBoZWFkID0geydIb3N0JzogJ20uZmFjZWJvb2suY29tJywgJ3ZpZXdwb3J0LXdpZHRoJzogJzk4MCcsICdzZWMtY2gtdWEnOiAnIiBOb3QgQTtCcmFuZCI7dj0iOTkiLCAiQ2hyb21pdW0iO3Y9IjEwMCIsICJHb29nbGUgQ2hyb21lIjt2PSIxMDAiJywgJ3NlYy1jaC11YS1tb2JpbGUnOiAnPzEnLCAnc2VjLWNoLXVhLXBsYXRmb3JtJzonIkFuZHJvaWQiJywgJ3NlYy1jaC1wcmVmZXJzLWNvbG9yLXNjaGVtZSc6ICdsaWdodCcsICdkbnQnOiAnMScsICd1cGdyYWRlLWluc2VjdXJlLXJlcXVlc3RzJzogJzEnLCAndXNlci1hZ2VudCc6IHVhLCAnYWNjZXB0JzogJ3RleHQvaHRtbCxhcHBsaWNhdGlvbi94aHRtbCt4bWwsYXBwbGljYXRpb24veG1sO3E9MC45LGltYWdlL0pBUkVEZixpbWFnZS93ZWJwLGltYWdlL2FwbmcsKltpbnNlcnRlZCBieSBjeXRob24gdG8gYXZvaWQgY29tbWVudCBjbG9zZXJdL1tpbnNlcnRlZCBieSBjeXRob24gdG8gYXZvaWQgY29tbWVudCBzdGFydF0qO3E9MC44LGFwcGxpY2F0aW9uL3NpZ25lZC1leGNoYW5nZTt2PWIzO3E9MC45JywgJ3NlYy1mZXRjaC1zaXRlJzogJ25vbmUnLCAnc2VjLWZldGNoLW1vZGUnOiAnbkpBUkVEZ2F0ZScsICdzZWMtZmV0Y2gtdXNlcic6ICc/MScsICdzZWMtZmV0Y2gtZGVzdCc6ICdkb2N1bWVudCcsICdhY2NlcHQtZW5jb2RpbmcnOiAnZ3ppcCwgZGVmbGF0ZSwgYnInLCAnYWNjZXB0LWxhbmd1YWdlJzogJ2VuLVVTLGVuO3E9MC45J30NCiAgICAgICAgICAgICAgICAgICAgICAgIGdldGxvZyA9IHNlc3Npb24uZ2V0KGYnaHR0cHM6Ly9mcmVlLmZhY2Vib29rLmNvbS9sb2dpbi9kZXZpY2UtYmFzZWQvcGFzc3dvcmQvP3VpZD17aWRzfSZmbG93PWxvZ2luX25vX3BpbiZyZWZzcmM9ZGVwcmVjYXRlZCZfcmRyJykNCiAgICAgICAgICAgICAgICAgICAgICAgIGlkcGFzcyA9eyJsc2QiOnJlLnNlYXJjaChmJ25hbWU9ImxzZCIgdmFsdWU9IiguKj8pIicsIHN0cihnZXRsb2cudGV4dCkpLmdyb3VwKDEpLCJqYXpvZXN0IjpyZS5zZWFyY2goZiduYW1lPSJqYXpvZXN0IiB2YWx1ZT0iKC4qPykiJywgc3RyKGdldGxvZy50ZXh0KSkuZ3JvdXAoMSksInVpZCI6aWRzLCJuZXh0IjoiaHR0cHM6Ly9tYmFzaWMuZmFjZWJvb2suY29tL2xvZ2luL3NhdmUtZGV2aWNlLyIsImZsb3ciOiJsb2dpbl9ub19waW4iLCJwYXNzIjpwYXMsfQ0KICAgICAgICAgICAgICAgICAgICAgICAgY29tcGxldGUgPSBzZXNzaW9uLnBvc3QoZidodHRwczovL2ZyZWUuZmFjZWJvb2suY29tL2xvZ2luL2RldmljZS1iYXNlZC92YWxpZGF0ZS1wYXNzd29yZC8/c2hibD0wJyxkYXRhPWlkcGFzcyxhbGxvd19yZWRpcmVjdHM9RmFsc2UsaGVhZGVycz1oZWFkKQ0KICAgICAgICAgICAgICAgICAgICAgICAgU2hhaGluPXNlc3Npb24uY29va2llcy5nZXRfZGljdCgpLmtleXMoKQ0KICAgICAgICAgICAgICAgICAgICAgICAgaWYgImNfdXNlciIgaW4gU2hhaGluOg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb2tpPXNlc3Npb24uY29va2llcy5nZXRfZGljdCgpDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGt1a2kgPSAoZiI7Iikuam9pbihbICIlcz0lcyIgJSAoa2V5LCB2YWx1ZSkgZm9yIGtleSwgdmFsdWUgaW4gc2Vzc2lvbi5jb29raWVzLmdldF9kaWN0KCkuaXRlbXMoKSBdKQ0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwcmludChmJ1xyXHJcMDMzWzE7MzJtIFtERVhURVItTElWRV0gJXMgfCAlcyclKGlkcyxwYXMpKQ0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvcGVuKGYnL3NkY2FyZC9ERVhURVItTElWRS1NMS50eHQnLCAnYScpLndyaXRlKGlkcysnfCcrcGFzKydcbicpO29wZW4oZicvc2RjYXJkL0RFWFRFUi1MSVZFLUNPT0tJRS1NMS50eHQnLCAnYScpLndyaXRlKGlkcysnfCcrcGFzKyd8JytrdWtpKydcbicpDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICNjZWtfYXBrKHNlc3Npb24sY29raSkNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb2tzLmFwcGVuZChpZHMpDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrDQogICAgICAgICAgICAgICAgICAgICAgICBlbGlmICdjaGVja3BvaW50JyBpbiBTaGFoaW46DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICd5JyBpbiBwY3A6DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcHJpbnQoZidcclxyXHgxYlsxOzMxbSBbREVYVEVSLURFQURdICcraWRzKycgfCAnK3BhcysnXDAzM1sxOzk3bScpDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb3BlbihmJy9zZGNhcmQvREVYVEVSLURFQUQudHh0JywgJ2EnKS53cml0ZShpZHMrJ3wnK3BhcysnXG4nKQ0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNwcy5hcHBlbmQoaWRzKQ0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsc2U6DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWsNCiAgICAgICAgICAgICAgICAgICAgICAgIGVsc2U6DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlDQogICAgICAgIGV4Y2VwdCByZXF1ZXN0cy5leGNlcHRpb25zLkNvbm5lY3Rpb25FcnJvcjoNCiAgICAgICAgICAgICAgICB0aW1lLnNsZWVwKDIwKQ0KICAgICAgICBsb29wKz0xDQpkZWYgTTIoaWRzLG5hbWVzLHBhc3NsaXN0KToNCiAgICAgICAgZ2xvYmFsIGxvb3Asb2tzLGNwcw0KICAgICAgICBzeXMuc3Rkb3V0LndyaXRlKGYnXHJcclwwMzNbMTszN20gW0RFWFRFUi1NMl0gJXN8XDAzM1sxOzMybU9LOi0lcyBcMDMzWzE7MzdtJyUobG9vcCxsZW4ob2tzKSkpO3N5cy5zdGRvdXQuZmx1c2goKQ0KICAgICAgICBzZXNzaW9uID0gcmVxdWVzdHMuU2Vzc2lvbigpDQogICAgICAgIHRyeToNCiAgICAgICAgICAgICAgICBmaXJzdCA9IG5hbWVzLnNwbGl0KGYnICcpWzBdDQogICAgICAgICAgICAgICAgdHJ5Og0KICAgICAgICAgICAgICAgICAgICAgICAgbGFzdCA9IG5hbWVzLnNwbGl0KGYnICcpWzFdDQogICAgICAgICAgICAgICAgZXhjZXB0Og0KICAgICAgICAgICAgICAgICAgICAgICAgbGFzdCA9ICdBaG1lZCcNCiAgICAgICAgICAgICAgICBwcyA9IGZpcnN0Lmxvd2VyKCkNCiAgICAgICAgICAgICAgICBwczIgPSBsYXN0Lmxvd2VyKCkNCiAgICAgICAgICAgICAgICBmb3IgZmlrciBpbiBwYXNzbGlzdDoNCiAgICAgICAgICAgICAgICAgICAgICAgIHBhcyA9IGZpa3IucmVwbGFjZShmJ0ZpcnN0JyxmaXJzdCkucmVwbGFjZShmJ0xhc3QnLGxhc3QpLnJlcGxhY2UoZidmaXJzdCcscHMpLnJlcGxhY2UoZidsYXN0JyxwczIpDQogICAgICAgICAgICAgICAgICAgICAgICB1YT1yYW5kb20uY2hvaWNlKHVnZW4pDQogICAgICAgICAgICAgICAgICAgICAgICBoZWFkID0geydIb3N0JzogJ20uZmFjZWJvb2suY29tJywgJ3ZpZXdwb3J0LXdpZHRoJzogJzk4MCcsICdzZWMtY2gtdWEnOiAnIiBOb3QgQTtCcmFuZCI7dj0iOTkiLCAiQ2hyb21pdW0iO3Y9IjEwMCIsICJHb29nbGUgQ2hyb21lIjt2PSIxMDAiJywgJ3NlYy1jaC11YS1tb2JpbGUnOiAnPzEnLCAnc2VjLWNoLXVhLXBsYXRmb3JtJzonIkFuZHJvaWQiJywgJ3NlYy1jaC1wcmVmZXJzLWNvbG9yLXNjaGVtZSc6ICdsaWdodCcsICdkbnQnOiAnMScsICd1cGdyYWRlLWluc2VjdXJlLXJlcXVlc3RzJzogJzEnLCAndXNlci1hZ2VudCc6IHVhLCAnYWNjZXB0JzogJ3RleHQvaHRtbCxhcHBsaWNhdGlvbi94aHRtbCt4bWwsYXBwbGljYXRpb24veG1sO3E9MC45LGltYWdlL0pBUkVEZixpbWFnZS93ZWJwLGltYWdlL2FwbmcsKltpbnNlcnRlZCBieSBjeXRob24gdG8gYXZvaWQgY29tbWVudCBjbG9zZXJdL1tpbnNlcnRlZCBieSBjeXRob24gdG8gYXZvaWQgY29tbWVudCBzdGFydF0qO3E9MC44LGFwcGxpY2F0aW9uL3NpZ25lZC1leGNoYW5nZTt2PWIzO3E9MC45JywgJ3NlYy1mZXRjaC1zaXRlJzogJ25vbmUnLCAnc2VjLWZldGNoLW1vZGUnOiAnbkpBUkVEZ2F0ZScsICdzZWMtZmV0Y2gtdXNlcic6ICc/MScsICdzZWMtZmV0Y2gtZGVzdCc6ICdkb2N1bWVudCcsICdhY2NlcHQtZW5jb2RpbmcnOiAnZ3ppcCwgZGVmbGF0ZSwgYnInLCAnYWNjZXB0LWxhbmd1YWdlJzogJ2VuLVVTLGVuO3E9MC45J30NCiAgICAgICAgICAgICAgICAgICAgICAgIGdldGxvZyA9IHNlc3Npb24uZ2V0KGYnaHR0cHM6Ly9mcmVlLmZhY2Vib29rLmNvbS9sb2dpbi9kZXZpY2UtYmFzZWQvcGFzc3dvcmQvP3VpZD17aWRzfSZmbG93PWxvZ2luX25vX3BpbiZyZWZzcmM9ZGVwcmVjYXRlZCZfcmRyJykNCiAgICAgICAgICAgICAgICAgICAgICAgIGlkcGFzcyA9eyJsc2QiOnJlLnNlYXJjaChmJ25hbWU9ImxzZCIgdmFsdWU9IiguKj8pIicsIHN0cihnZXRsb2cudGV4dCkpLmdyb3VwKDEpLCJqYXpvZXN0IjpyZS5zZWFyY2goZiduYW1lPSJqYXpvZXN0IiB2YWx1ZT0iKC4qPykiJywgc3RyKGdldGxvZy50ZXh0KSkuZ3JvdXAoMSksInVpZCI6aWRzLCJuZXh0IjoiaHR0cHM6Ly9tYmFzaWMuZmFjZWJvb2suY29tL2xvZ2luL3NhdmUtZGV2aWNlLyIsImZsb3ciOiJsb2dpbl9ub19waW4iLCJwYXNzIjpwYXMsfQ0KICAgICAgICAgICAgICAgICAgICAgICAgY29tcGxldGUgPSBzZXNzaW9uLnBvc3QoZidodHRwczovL2ZyZWUuZmFjZWJvb2suY29tL2xvZ2luL2RldmljZS1iYXNlZC92YWxpZGF0ZS1wYXNzd29yZC8/c2hibD0wJyxkYXRhPWlkcGFzcyxhbGxvd19yZWRpcmVjdHM9RmFsc2UsaGVhZGVycz1oZWFkKQ0KICAgICAgICAgICAgICAgICAgICAgICAgU2hhaGluPXNlc3Npb24uY29va2llcy5nZXRfZGljdCgpLmtleXMoKQ0KICAgICAgICAgICAgICAgICAgICAgICAgaWYgImNfdXNlciIgaW4gU2hhaGluOg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb2tpPXNlc3Npb24uY29va2llcy5nZXRfZGljdCgpDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGt1a2kgPSAoZiI7Iikuam9pbihbICIlcz0lcyIgJSAoa2V5LCB2YWx1ZSkgZm9yIGtleSwgdmFsdWUgaW4gc2Vzc2lvbi5jb29raWVzLmdldF9kaWN0KCkuaXRlbXMoKSBdKQ0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwcmludChmJ1xyXHJcMDMzWzE7MzJtIFtERVhURVItTElWRV0gJXMgfCAlcyclKGlkcyxwYXMpKQ0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvcGVuKGYnL3NkY2FyZC9ERVhURVItTElWRS1NMi50eHQnLCAnYScpLndyaXRlKGlkcysnfCcrcGFzKydcbicpO29wZW4oZicvc2RjYXJkL0RFWFRFUi1MSVZFLUNPT0tJRS1NMi50eHQnLCAnYScpLndyaXRlKGlkcysnfCcrcGFzKyd8JytrdWtpKydcbicpDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICNjZWtfYXBrKHNlc3Npb24sY29raSkNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb2tzLmFwcGVuZChpZHMpDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrDQogICAgICAgICAgICAgICAgICAgICAgICBlbGlmICdjaGVja3BvaW50JyBpbiBTaGFoaW46DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICd5JyBpbiBwY3A6DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcHJpbnQoZidcclxyXHgxYlsxOzMxbSBbREVYVEVSLURFQURdICcraWRzKycgfCAnK3BhcysnXDAzM1sxOzk3bScpDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb3BlbihmJy9zZGNhcmQvREVYVEVSLURFQUQudHh0JywgJ2EnKS53cml0ZShpZHMrJ3wnK3BhcysnXG4nKQ0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNwcy5hcHBlbmQoaWRzKQ0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsc2U6DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWsNCiAgICAgICAgICAgICAgICAgICAgICAgIGVsc2U6DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlDQogICAgICAgIGV4Y2VwdCByZXF1ZXN0cy5leGNlcHRpb25zLkNvbm5lY3Rpb25FcnJvcjoNCiAgICAgICAgICAgICAgICB0aW1lLnNsZWVwKDIwKQ0KICAgICAgICBsb29wKz0xDQpkZWYgTTMoaWRzLG5hbWVzLHBhc3NsaXN0KToNCiAgICAgICAgZ2xvYmFsIGxvb3Asb2tzLGNwcw0KICAgICAgICBzeXMuc3Rkb3V0LndyaXRlKGYnXHJcclwwMzNbMTszN20gW0RFWFRFUi1NM10gJXN8XDAzM1sxOzMybU9LOi0lcyBcMDMzWzE7MzdtJyUobG9vcCxsZW4ob2tzKSkpO3N5cy5zdGRvdXQuZmx1c2goKQ0KICAgICAgICBzZXNzaW9uID0gcmVxdWVzdHMuU2Vzc2lvbigpDQogICAgICAgIHRyeToNCiAgICAgICAgICAgICAgICBmaXJzdCA9IG5hbWVzLnNwbGl0KGYnICcpWzBdDQogICAgICAgICAgICAgICAgdHJ5Og0KICAgICAgICAgICAgICAgICAgICAgICAgbGFzdCA9IG5hbWVzLnNwbGl0KGYnICcpWzFdDQogICAgICAgICAgICAgICAgZXhjZXB0Og0KICAgICAgICAgICAgICAgICAgICAgICAgbGFzdCA9ICdBaG1lZCcNCiAgICAgICAgICAgICAgICBwcyA9IGZpcnN0Lmxvd2VyKCkNCiAgICAgICAgICAgICAgICBwczIgPSBsYXN0Lmxvd2VyKCkNCiAgICAgICAgICAgICAgICBmb3IgZmlrciBpbiBwYXNzbGlzdDoNCiAgICAgICAgICAgICAgICAgICAgICAgIHBhcyA9IGZpa3IucmVwbGFjZShmJ0ZpcnN0JyxmaXJzdCkucmVwbGFjZShmJ0xhc3QnLGxhc3QpLnJlcGxhY2UoZidmaXJzdCcscHMpLnJlcGxhY2UoZidsYXN0JyxwczIpDQogICAgICAgICAgICAgICAgICAgICAgICB1YT1yYW5kb20uY2hvaWNlKHVnZW4pDQogICAgICAgICAgICAgICAgICAgICAgICBoZWFkID0geydIb3N0JzogJ20uZmFjZWJvb2suY29tJywgJ3ZpZXdwb3J0LXdpZHRoJzogJzk4MCcsICdzZWMtY2gtdWEnOiAnIiBOb3QgQTtCcmFuZCI7dj0iOTkiLCAiQ2hyb21pdW0iO3Y9IjEwMCIsICJHb29nbGUgQ2hyb21lIjt2PSIxMDAiJywgJ3NlYy1jaC11YS1tb2JpbGUnOiAnPzEnLCAnc2VjLWNoLXVhLXBsYXRmb3JtJzonIkFuZHJvaWQiJywgJ3NlYy1jaC1wcmVmZXJzLWNvbG9yLXNjaGVtZSc6ICdsaWdodCcsICdkbnQnOiAnMScsICd1cGdyYWRlLWluc2VjdXJlLXJlcXVlc3RzJzogJzEnLCAndXNlci1hZ2VudCc6IHVhLCAnYWNjZXB0JzogJ3RleHQvaHRtbCxhcHBsaWNhdGlvbi94aHRtbCt4bWwsYXBwbGljYXRpb24veG1sO3E9MC45LGltYWdlL0pBUkVEZixpbWFnZS93ZWJwLGltYWdlL2FwbmcsKltpbnNlcnRlZCBieSBjeXRob24gdG8gYXZvaWQgY29tbWVudCBjbG9zZXJdL1tpbnNlcnRlZCBieSBjeXRob24gdG8gYXZvaWQgY29tbWVudCBzdGFydF0qO3E9MC44LGFwcGxpY2F0aW9uL3NpZ25lZC1leGNoYW5nZTt2PWIzO3E9MC45JywgJ3NlYy1mZXRjaC1zaXRlJzogJ25vbmUnLCAnc2VjLWZldGNoLW1vZGUnOiAnbkpBUkVEZ2F0ZScsICdzZWMtZmV0Y2gtdXNlcic6ICc/MScsICdzZWMtZmV0Y2gtZGVzdCc6ICdkb2N1bWVudCcsICdhY2NlcHQtZW5jb2RpbmcnOiAnZ3ppcCwgZGVmbGF0ZSwgYnInLCAnYWNjZXB0LWxhbmd1YWdlJzogJ2VuLVVTLGVuO3E9MC45J30NCiAgICAgICAgICAgICAgICAgICAgICAgIGdldGxvZyA9IHNlc3Npb24uZ2V0KGYnaHR0cHM6Ly9mcmVlLmZhY2Vib29rLmNvbS9sb2dpbi9kZXZpY2UtYmFzZWQvcGFzc3dvcmQvP3VpZD17aWRzfSZmbG93PWxvZ2luX25vX3BpbiZyZWZzcmM9ZGVwcmVjYXRlZCZfcmRyJykNCiAgICAgICAgICAgICAgICAgICAgICAgIGlkcGFzcyA9eyJsc2QiOnJlLnNlYXJjaChmJ25hbWU9ImxzZCIgdmFsdWU9IiguKj8pIicsIHN0cihnZXRsb2cudGV4dCkpLmdyb3VwKDEpLCJqYXpvZXN0IjpyZS5zZWFyY2goZiduYW1lPSJqYXpvZXN0IiB2YWx1ZT0iKC4qPykiJywgc3RyKGdldGxvZy50ZXh0KSkuZ3JvdXAoMSksInVpZCI6aWRzLCJuZXh0IjoiaHR0cHM6Ly9tYmFzaWMuZmFjZWJvb2suY29tL2xvZ2luL3NhdmUtZGV2aWNlLyIsImZsb3ciOiJsb2dpbl9ub19waW4iLCJwYXNzIjpwYXMsfQ0KICAgICAgICAgICAgICAgICAgICAgICAgY29tcGxldGUgPSBzZXNzaW9uLnBvc3QoZidodHRwczovL2ZyZWUuZmFjZWJvb2suY29tL2xvZ2luL2RldmljZS1iYXNlZC92YWxpZGF0ZS1wYXNzd29yZC8/c2hibD0wJyxkYXRhPWlkcGFzcyxhbGxvd19yZWRpcmVjdHM9RmFsc2UsaGVhZGVycz1oZWFkKQ0KICAgICAgICAgICAgICAgICAgICAgICAgU2hhaGluPXNlc3Npb24uY29va2llcy5nZXRfZGljdCgpLmtleXMoKQ0KICAgICAgICAgICAgICAgICAgICAgICAgaWYgImNfdXNlciIgaW4gU2hhaGluOg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb2tpPXNlc3Npb24uY29va2llcy5nZXRfZGljdCgpDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGt1a2kgPSAoZiI7Iikuam9pbihbICIlcz0lcyIgJSAoa2V5LCB2YWx1ZSkgZm9yIGtleSwgdmFsdWUgaW4gc2Vzc2lvbi5jb29raWVzLmdldF9kaWN0KCkuaXRlbXMoKSBdKQ0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwcmludChmJ1xyXHJcMDMzWzE7MzJtIFtERVhURVItTElWRV0gJXMgfCAlcyclKGlkcyxwYXMpKQ0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwcmludCgiXDAzM1sxOzk2bSBbQ09PS0lFLfCfjapdIDpcMDMzWzE7MzdtICIra3VraSkgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvcGVuKGYnL3NkY2FyZC9ERVhURVItTElWRS1NMy50eHQnLCAnYScpLndyaXRlKGlkcysnfCcrcGFzKydcbicpO29wZW4oZicvc2RjYXJkL0RFWFRFUi1MSVZFLUNPT0tJRS1NMy50eHQnLCAnYScpLndyaXRlKGlkcysnfCcrcGFzKyd8JytrdWtpKydcbicpDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICNjZWtfYXBrKHNlc3Npb24sY29raSkNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb2tzLmFwcGVuZChpZHMpDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrDQogICAgICAgICAgICAgICAgICAgICAgICBlbGlmICdjaGVja3BvaW50JyBpbiBTaGFoaW46DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICd5JyBpbiBwY3A6DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcHJpbnQoZidcclxyXHgxYlsxOzMxbSBbREVYVEVSLURFQURdICcraWRzKycgfCAnK3BhcysnXDAzM1sxOzk3bScpDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb3BlbihmJy9zZGNhcmQvREVYVEVSLURFQUQudHh0JywgJ2EnKS53cml0ZShpZHMrJ3wnK3BhcysnXG4nKQ0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNwcy5hcHBlbmQoaWRzKQ0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsc2U6DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWsNCiAgICAgICAgICAgICAgICAgICAgICAgIGVsc2U6DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlDQogICAgICAgIGV4Y2VwdCByZXF1ZXN0cy5leGNlcHRpb25zLkNvbm5lY3Rpb25FcnJvcjoNCiAgICAgICAgICAgICAgICB0aW1lLnNsZWVwKDIwKQ0KICAgICAgICBsb29wKz0xDQp4eHh4eD0oZiJHVC0xMDE1IiwiR1QtMTAyMCIsIkdULTEwMzAiLCJHVC0xMDM1IiwiR1QtMTA0MCIsIkdULTEwNDUiLCJHVC0xMDUwIiwiR1QtMTI0MCIsIkdULTE0NDAiLCJHVC0xNDUwIiwiR1QtMTgxOTAiLCJHVC0xODI2MiIsIkdULTE5MDYwSSIsIkdULTE5MDgyIiwiR1QtMTkwODMiLCJHVC0xOTEwNSIsIkdULTE5MTUyIiwiR1QtMTkxOTIiLCJHVC0xOTMwMCIsIkdULTE5NTA1IiwiR1QtMjAwMCIsIkdULTIwMDAwIiwiR1QtMjAwcyIsIkdULTMwMDAiLCJHVC00MTRYT1AiLCJHVC02OTE4IiwiR1QtNzAxMCIsIkdULTcwMjAiLCJHVC03MDMwIiwiR1QtNzA0MCIsIkdULTcwNTAiLCJHVC03MTAwIiwiR1QtNzEwNSIsIkdULTcxMTAiLCJHVC03MjA1IiwiR1QtNzIxMCIsIkdULTcyNDBSIiwiR1QtNzI0NSIsIkdULTczMDMiLCJHVC03MzEwIiwiR1QtNzMyMCIsIkdULTczMjUiLCJHVC03MzI2IiwiR1QtNzM0MCIsIkdULTc0MDUiLCJHVC03NTUwIDVHVC04MDA1IiwiR1QtODAxMCIsIkdULTgxIiwiR1QtODEwIiwiR1QtODEwNSIsIkdULTgxMTAiLCJHVC04MjIwUyIsIkdULTg0MTAiLCJHVC05MzAwIiwiR1QtOTMyMCIsIkdULTkzRyIsIkdULUE3MTAwIiwiR1QtQTk1MDAiLCJHVC1BTkRST0lEIiwiR1QtQjI3MTAiLCJHVC1CNTMzMCIsIkdULUI1MzMwQiIsIkdULUI1MzMwTCIsIkdULUI1MzMwWktBSU5VIiwiR1QtQjU1MTAiLCJHVC1CNTUxMiIsIkdULUI1NzIyIiwiR1QtQjc1MTAiLCJHVC1CNzcyMiIsIkdULUI3ODEwIiwiR1QtQjkxNTAiLCJHVC1COTM4OCIsIkdULUMzMDEwIiwiR1QtQzMyNjIiLCJHVC1DMzMxMFIiLCJHVC1DMzMxMiIsIkdULUMzMzEyUiIsIkdULUMzMzEzVCIsIkdULUMzMzIyIiwiR1QtQzMzMjJpIiwiR1QtQzM1MjAiLCJHVC1DMzUyMEkiLCJHVC1DMzU5MiIsIkdULUMzNTk1IiwiR1QtQzM3ODIiLCJHVC1DNjcxMiIsIkdULUUxMjgyVCIsIkdULUUxNTAwIiwiR1QtRTIyMDAiLCJHVC1FMjIwMiIsIkdULUUyMjUwIiwiR1QtRTIyNTIiLCJHVC1FMjYwMCIsIkdULUUyNjUyVyIsIkdULUUzMjEwIiwiR1QtRTMzMDkiLCJHVC1FMzMwOUkiLCJHVC1FMzMwOVQiLCJHVC1HNTMwSCIsIkdULUc5MzBGIiwiR1QtSDk1MDAiLCJHVC1JNTUwOCIsIkdULUk1ODAxIiwiR1QtSTY0MTAiLCJHVC1JODE1MCIsIkdULUk4MTYwT0tMVFBBIiwiR1QtSTgxNjBaV0xUVFQiLCJHVC1JODI1OCIsIkdULUk4MjYyRCIsIkdULUk4MjY4IiJHVC1JODUwNSIsIkdULUk4NTMwQkFBQlRVIiwiR1QtSTg1MzBCQUxDSE8iLCJHVC1JODUzMEJBTFRUVCIsIkdULUk4NTUwRSIsIkdULUk4NzUwIiwiR1QtSTkwMCIsIkdULUk5MDA4TCIsIkdULUk5MDgwRSIsIkdULUk5MDgyQyIsIkdULUk5MDgyRVdBSU5VIiwiR1QtSTkwODJpIiwiR1QtSTkxMDBHIiwiR1QtSTkxMDBMS0xDSFQiLCJHVC1JOTEwME0iLCJHVC1JOTEwMFAiLCJHVC1JOTEwMFQiLCJHVC1JOTEwNVVBTkRCVCIsIkdULUk5MTI4RSIsIkdULUk5MTI4SSIsIkdULUk5MTI4ViIsIkdULUk5MTU4UCIsIkdULUk5MTU4ViIsIkdULUk5MTY4SSIsIkdULUk5MTkwIiwiR1QtSTkxOTIiLCJHVC1JOTE5MkkiLCJHVC1JOTE5NUgiLCJHVC1JOTE5NUwiLCJHVC1JOTI1MCIsIkdULUk5MzAwIiwiR1QtSTkzMDBJIiwiR1QtSTkzMDFJIiwiR1QtSTkzMDNJIiwiR1QtSTkzMDVOIiwiR1QtSTkzMDhJIiwiR1QtSTk1MDAiLCJHVC1JOTUwNUciLCJHVC1JOTUwNVgiLCJHVC1JOTUwN1YiLCJHVC1JOTYwMCIsIkdULU01NjUwIiwiR1QtTjUwMDBTIiwiR1QtTjUxMDAiLCJHVC1ONTEwNSIsIkdULU41MTEwIiwiR1QtTjUxMjAiLCJHVC1ONzAwMEIiLCJHVC1ONzAwNSIsIkdULU43MTAwIiwiR1QtTjcxMDBUIiwiR1QtTjcxMDIiLCJHVC1ONzEwNSIsIkdULU43MTA1VCIsIkdULU43MTA4IiwiR1QtTjcxMDhEIiwiR1QtTjgwMDAiLCJHVC1OODAwNSIsIkdULU44MDEwIiwiR1QtTjgwMjAiLCJHVC1OOTAwMCIsIkdULU45NTA1IiwiR1QtUDEwMDBDV0FYU0EiLCJHVC1QMTAwME0iLCJHVC1QMTAwMFQiLCJHVC1QMTAxMCIsIkdULVAzMTAwQiIsIkdULVAzMTA1IiwiR1QtUDMxMDgiLCJHVC1QMzExMCIsIkdULVA1MTAwIiwiR1QtUDUxMTAiLCJHVC1QNTIwMCIsIkdULVA1MjEwIiwiR1QtUDUyMTBYRDEiLCJHVC1QNTIyMCIsIkdULVA2MjAwIiwiR1QtUDYyMDBMIiwiR1QtUDYyMDEiLCJHVC1QNjIxMCIsIkdULVA2MjExIiwiR1QtUDY4MDAiLCJHVC1QNzEwMCIsIkdULVA3MzAwIiwiR1QtUDczMDBCIiwiR1QtUDczMTAiLCJHVC1QNzMyMCIsIkdULVA3NTAwRCIsIkdULVA3NTAwTSIsIlNBTVNVTkciLCJMTVk0IiwiTE1ZNDdWIiwiTU1CMjlLIiwiTU1CMjlNIiwiTFJYMjJDIiwiTFJYMjJHIiwiTk1GMiIsIk5NRjI2WCIsIk5NRjI2WDsiLCJOUkQ5ME0iLCJOUkQ5ME07IiwiU1BILUw3MjAiLCJJTUw3NEsiLCJJTU03NkQiLCJKRFEzOSIsIkpTUzE1SiIsIkpaTzU0SyIsIktPVDQiLCJLT1Q0OUgiLCJLT1Q0U00tVDMxMCIsIktUVTg0UCIsIlNNLUE1MDBGIiwiU00tQTUwMEZVIiwiU00tQTUwMEgiLCJTTS1HNTMyRiIsIlNNLUc5MDBGIiwiU00tRzkyMEYiLCJTTS1HOTMwRiIsIlNNLUc5MzUiLCJTTS1HOTUwRiIsIlNNLUozMjBGIiwiU00tSjMyMEZOIiwiU00tSjMyMEgiLCJTTS1KMzIwTSIsIlNNLUo1MTBGTiIsIlNNLUo3MDFGIiwiU00tTjkyMFMiLCJTTS1UMTExIiwiU00tVDIzMCIsIlNNLVQyMzEiLCJTTS1UMjM1IiwiU00tVDI4MCIsIlNNLVQzMTEiLCJTTS1UMzE1IiwiU00tVDUyNSIsIlNNLVQ1MzEiLCJTTS1UNTM1IiwiU00tVDU1NSIsIlNNLVQ1NjEiLCJTTS1UNzA1IiwiU00tVDgwNSIsIlNNLVQ4MjAiKQ0KIw0KZGVmIE00KGlkcyxuYW1lcyxwYXNzbGlzdCk6DQogICAgICAgIGdsb2JhbCBsb29wLG9rcyxjcHMNCiAgICAgICAgc3lzLnN0ZG91dC53cml0ZShmJ1xyXHJcMDMzWzE7MzdtIFtERVhURVItTTRdICVzfFwwMzNbMTszMm1PSzotJXMgXDAzM1sxOzM3bSclKGxvb3AsbGVuKG9rcykpKTtzeXMuc3Rkb3V0LmZsdXNoKCkNCiAgICAgICAgc2Vzc2lvbiA9IHJlcXVlc3RzLlNlc3Npb24oKQ0KICAgICAgICB0cnk6DQogICAgICAgICAgICAgICAgZmlyc3QgPSBuYW1lcy5zcGxpdChmJyAnKVswXQ0KICAgICAgICAgICAgICAgIHRyeToNCiAgICAgICAgICAgICAgICAgICAgICAgIGxhc3QgPSBuYW1lcy5zcGxpdChmJyAnKVsxXQ0KICAgICAgICAgICAgICAgIGV4Y2VwdDoNCiAgICAgICAgICAgICAgICAgICAgICAgIGxhc3QgPSAnQWhtZWQnDQogICAgICAgICAgICAgICAgcHMgPSBmaXJzdC5sb3dlcigpDQogICAgICAgICAgICAgICAgcHMyID0gbGFzdC5sb3dlcigpDQogICAgICAgICAgICAgICAgZm9yIGZpa3IgaW4gcGFzc2xpc3Q6DQogICAgICAgICAgICAgICAgICAgICAgICBwYXMgPSBmaWtyLnJlcGxhY2UoZidGaXJzdCcsZmlyc3QpLnJlcGxhY2UoZidMYXN0JyxsYXN0KS5yZXBsYWNlKGYnZmlyc3QnLHBzKS5yZXBsYWNlKGYnbGFzdCcscHMyKQ0KICAgICAgICAgICAgICAgICAgICAgICAgdWE9cmFuZG9tLmNob2ljZSh1Z2VuKQ0KICAgICAgICAgICAgICAgICAgICAgICAgaGVhZCA9IHsnSG9zdCc6ICdtYmFzaWMuZmFjZWJvb2suY29tJywgJ3ZpZXdwb3J0LXdpZHRoJzogJzk4MCcsICdzZWMtY2gtdWEnOiAnIiBOb3QgQTtCcmFuZCI7dj0iOTkiLCAiQ2hyb21pdW0iO3Y9IjEwMCIsICJHb29nbGUgQ2hyb21lIjt2PSIxMDAiJywgJ3NlYy1jaC11YS1tb2JpbGUnOiAnPzEnLCAnc2VjLWNoLXVhLXBsYXRmb3JtJzonIkFuZHJvaWQiJywgJ3NlYy1jaC1wcmVmZXJzLWNvbG9yLXNjaGVtZSc6ICdsaWdodCcsICdkbnQnOiAnMScsICd1cGdyYWRlLWluc2VjdXJlLXJlcXVlc3RzJzogJzEnLCAndXNlci1hZ2VudCc6IHVhLCAnYWNjZXB0JzogJ3RleHQvaHRtbCxhcHBsaWNhdGlvbi94aHRtbCt4bWwsYXBwbGljYXRpb24veG1sO3E9MC45LGltYWdlL0pBUkVEZixpbWFnZS93ZWJwLGltYWdlL2FwbmcsKltpbnNlcnRlZCBieSBjeXRob24gdG8gYXZvaWQgY29tbWVudCBjbG9zZXJdL1tpbnNlcnRlZCBieSBjeXRob24gdG8gYXZvaWQgY29tbWVudCBzdGFydF0qO3E9MC44LGFwcGxpY2F0aW9uL3NpZ25lZC1leGNoYW5nZTt2PWIzO3E9MC45JywgJ3NlYy1mZXRjaC1zaXRlJzogJ25vbmUnLCAnc2VjLWZldGNoLW1vZGUnOiAnbkpBUkVEZ2F0ZScsICdzZWMtZmV0Y2gtdXNlcic6ICc/MScsICdzZWMtZmV0Y2gtZGVzdCc6ICdkb2N1bWVudCcsICdhY2NlcHQtZW5jb2RpbmcnOiAnZ3ppcCwgZGVmbGF0ZSwgYnInLCAnYWNjZXB0LWxhbmd1YWdlJzogJ2VuLVVTLGVuO3E9MC45J30NCiAgICAgICAgICAgICAgICAgICAgICAgIGdldGxvZyA9IHNlc3Npb24uZ2V0KGYnaHR0cHM6Ly9tYmFzaWMuZmFjZWJvb2suY29tL2xvZ2luL2RldmljZS1iYXNlZC9wYXNzd29yZC8/dWlkPXtpZHN9JmZsb3c9bG9naW5fbm9fcGluJnJlZnNyYz1kZXByZWNhdGVkJl9yZHInKQ0KICAgICAgICAgICAgICAgICAgICAgICAgaWRwYXNzID17ImxzZCI6cmUuc2VhcmNoKGYnbmFtZT0ibHNkIiB2YWx1ZT0iKC4qPykiJywgc3RyKGdldGxvZy50ZXh0KSkuZ3JvdXAoMSksImphem9lc3QiOnJlLnNlYXJjaChmJ25hbWU9Imphem9lc3QiIHZhbHVlPSIoLio/KSInLCBzdHIoZ2V0bG9nLnRleHQpKS5ncm91cCgxKSwidWlkIjppZHMsIm5leHQiOiJodHRwczovL21iYXNpYy5mYWNlYm9vay5jb20vbG9naW4vc2F2ZS1kZXZpY2UvIiwiZmxvdyI6ImxvZ2luX25vX3BpbiIsInBhc3MiOnBhcyx9DQogICAgICAgICAgICAgICAgICAgICAgICBjb21wbGV0ZSA9IHNlc3Npb24ucG9zdChmJ2h0dHBzOi8vbWJhc2ljLmZhY2Vib29rLmNvbS9sb2dpbi9kZXZpY2UtYmFzZWQvdmFsaWRhdGUtcGFzc3dvcmQvP3NoYmw9MCcsZGF0YT1pZHBhc3MsYWxsb3dfcmVkaXJlY3RzPUZhbHNlLGhlYWRlcnM9aGVhZCkNCiAgICAgICAgICAgICAgICAgICAgICAgIFNoYWhpbj1zZXNzaW9uLmNvb2tpZXMuZ2V0X2RpY3QoKS5rZXlzKCkNCiAgICAgICAgICAgICAgICAgICAgICAgIGlmICJjX3VzZXIiIGluIFNoYWhpbjoNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29raT1zZXNzaW9uLmNvb2tpZXMuZ2V0X2RpY3QoKQ0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBrdWtpID0gKGYiOyIpLmpvaW4oWyAiJXM9JXMiICUgKGtleSwgdmFsdWUpIGZvciBrZXksIHZhbHVlIGluIHNlc3Npb24uY29va2llcy5nZXRfZGljdCgpLml0ZW1zKCkgXSkNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcHJpbnQoZidcclxyXDAzM1sxOzMybSBbREVYVEVSLUxJVkVdICVzIHwgJXMnJShpZHMscGFzKSkNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcHJpbnQoIlwwMzNbMTs5Nm0gW0NPT0tJRS3wn42qXSA6XDAzM1sxOzM3bSAiK2t1a2kpICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgI2Nla19hcGsoc2Vzc2lvbixjb2tpKQ0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvcGVuKGYnL3NkY2FyZC9ERVhURVItTElWRS1NNC50eHQnLCAnYScpLndyaXRlKGlkcysnfCcrcGFzKydcbicpO29wZW4oZicvc2RjYXJkL0RFWFRFUi1MSVZFLUNPT0tJRS1NNC50eHQnLCAnYScpLndyaXRlKGlkcysnfCcrcGFzKyd8JytrdWtpKydcbicpDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9rcy5hcHBlbmQoaWRzKQ0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaw0KICAgICAgICAgICAgICAgICAgICAgICAgZWxpZiAnY2hlY2twb2ludCcgaW4gU2hhaGluOg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAneScgaW4gcGNwOg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHByaW50KGYnXHJcclx4MWJbMTszMW0gW0RFWFRFUi1ERUFEXSAnK2lkcysnIHwgJytwYXMrJ1wwMzNbMTs5N20nKQ0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9wZW4oZicvc2RjYXJkL0RFWFRFUi1ERUFELnR4dCcsICdhJykud3JpdGUoaWRzKyd8JytwYXMrJ1xuJykNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjcHMuYXBwZW5kKGlkcykNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaw0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbHNlOg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrDQogICAgICAgICAgICAgICAgICAgICAgICBlbHNlOg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb250aW51ZQ0KICAgICAgICBleGNlcHQgcmVxdWVzdHMuZXhjZXB0aW9ucy5Db25uZWN0aW9uRXJyb3I6DQogICAgICAgICAgICAgICAgdGltZS5zbGVlcCgyMCkNCiAgICAgICAgbG9vcCs9MQ0KZGVmIE01KGlkcyxuYW1lcyxwYXNzbGlzdCk6DQogICAgICAgICAgICAgICAgdHJ5Og0KICAgICAgICAgICAgICAgICAgICAgICAgZ2xvYmFsIG9rLGxvb3ANCiAgICAgICAgICAgICAgICAgICAgICAgIHN5cy5zdGRvdXQud3JpdGUoZidcclxyXDAzM1sxOzM3bSBbREVYVEVSLU01XSAlc3xcMDMzWzE7MzJtT0s6LSVzIFwwMzNbMTszN20nJShsb29wLGxlbihva3MpKSk7c3lzLnN0ZG91dC5mbHVzaCgpDQogICAgICAgICAgICAgICAgICAgICAgICBmbiA9IG5hbWVzLnNwbGl0KGYnICcpWzBdDQogICAgICAgICAgICAgICAgICAgICAgICB0cnk6DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxuID0gbmFtZXMuc3BsaXQoZicgJylbMV0NCiAgICAgICAgICAgICAgICAgICAgICAgIGV4Y2VwdDoNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbG4gPSBmbg0KICAgICAgICAgICAgICAgICAgICAgICAgZm9yIHB3IGluIHBhc3NsaXN0Og0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwYXMgPSBwdy5yZXBsYWNlKGYnZmlyc3QnLGZuLmxvd2VyKCkpLnJlcGxhY2UoZidGaXJzdCcsZm4pLnJlcGxhY2UoZidsYXN0Jyxsbi5sb3dlcigpKS5yZXBsYWNlKGYnTGFzdCcsbG4pLnJlcGxhY2UoZidOYW1lJyxuYW1lcykucmVwbGFjZShmJ25hbWUnLG5hbWVzLmxvd2VyKCkpDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFwcGxpY2F0aW9uX3ZlcnNpb24gPSBzdHIocmFuZG9tLnJhbmRpbnQoMTExLDU1NSkpKycuMC4wLicrc3RyKHJhbmRvbS5yYW5kcmFuZ2UoOSw0OSkpK3N0cihyYW5kb20ucmFuZGludCgxMTEsNTU1KSkNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYXBwbGljYXRpb25fdmVyc2lvbl9jb2RlPXN0cihyYW5kb20ucmFuZGludCgwMDAwMDAwMDAsOTk5OTk5OTk5KSkNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZmJzPXJhbmRvbS5jaG9pY2UoZmJrcykNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZ3R0PXJhbmRvbS5jaG9pY2UoeHh4eHgpDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGd0dHQ9cmFuZG9tLmNob2ljZSh4eHh4eCkNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYW5kcm9pZF92ZXJzaW9uPXN0cihyYW5kb20ucmFuZHJhbmdlKDYsMTMpKQ0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB1YV9zdHJpbmcgPSBmJ0RNNFJLay8yLjEuMCAobGluZXg7IFU7IEFuZHJvaWQge3N0cihhbmRyb2lkX3ZlcnNpb24pfS4wLjA7IHtzdHIoZ3R0KX0gQnVpbGQve3N0cihndHR0KX0gW0ZCQU4vRkI0QTtGQkFWL3tzdHIoYXBwbGljYXRpb25fdmVyc2lvbil9O0ZCQlYve3N0cihhcHBsaWNhdGlvbl92ZXJzaW9uX2NvZGUpfTtGQkRNLycrJ3tkZW5zaXR5PTIuMCx3aWR0aD03MjAsaGVpZ2h0PTEyODB9OycrZidGQkxDL2VuX1VTO0ZCUlYve3N0cihhcHBsaWNhdGlvbl92ZXJzaW9uX2NvZGUpfTtGQkNSL01vdmlzdGFyO0ZCTUYvc2Ftc3VuZztGQkJEL3NhbXN1bmc7RkJQTi97c3RyKGZicyl9O0ZCRFYve3N0cihndHQpfTtGQlNWLzcuMDtGQk9QLzE7RkJDQS9hcm1lYWJpLXY3YTphcm1lYWJpO10nDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRldmljZV9pZCA9IHN0cih1dWlkLnV1aWQ0KCkpDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFkaWQgPSBzdHIodXVpZC51dWlkNCgpKQ0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhID0geydhZGlkJzphZGlkLA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdlbWFpbCc6aWRzLA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdwYXNzd29yZCc6cGFzLA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdjcGwnOid0cnVlJywNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnY3JlZGVudGlhbHNfdHlwZSc6J2RldmljZV9iYXNlZF9sb2dpbl9wYXNzd29yZCcsDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgInNvdXJjZSI6ICJkZXZpY2VfYmFzZWRfbG9naW4iLA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdlcnJvcl9kZXRhaWxfdHlwZSc6J2J1dHRvbl93aXRoX2Rpc2FibGVkJywNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnc291cmNlJzonbG9naW4nLCdmb3JtYXQnOidqc29uJywNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnZ2VuZXJhdGVfc2Vzc2lvbl9jb29raWVzJzonMScsDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ2dlbmVyYXRlX2FuYWx5dGljc19jbGFpbSc6JzEnLA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdnZW5lcmF0ZV9tYWNoaW5lX2lkJzonMScsDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgImxvY2FsZSI6ImVuX1VTIiwiY2xpZW50X2NvdW50cnlfY29kZSI6IlVTIiwNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnZGV2aWNlJzpndHQsDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ2RldmljZV9pZCc6YWRpZCwNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAibWV0aG9kIjogImF1dGgubG9naW4iLA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICJmYl9hcGlfcmVxX2ZyaWVuZGx5X25hbWUiOiAiYXV0aGVudGljYXRlIiwNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAiZmJfYXBpX2NhbGxlcl9jbGFzcyI6ICJjb20uZmFjZWJvb2suYWNjb3VudC5sb2dpbi5wcm90b2NvbC5GYjRhQXV0aEhhbmRsZXIifQ0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBoZWFkID0gew0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdjb250ZW50LXR5cGUnOidhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWQnLA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICd4LWZiLXNpbS1obmknOnN0cihyYW5kb20ucmFuZGludCgyZTQsNGU0KSksDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ3gtZmItY29ubmVjdGlvbi10eXBlJzondW5rbm93bicsDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ0F1dGhvcml6YXRpb24nOidPQXV0aCAzNTA2ODU1MzE3Mjh8NjJmOGNlOWY3NGIxMmY4NGMxMjNjYzIzNDM3YTRhMzInLA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICd1c2VyLWFnZW50Jzp1YV9zdHJpbmcsDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ3gtZmItbmV0LWhuaSc6c3RyKHJhbmRvbS5yYW5kaW50KDJlNCw0ZTQpKSwNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAneC1mYi1jb25uZWN0aW9uLWJhbmR3aWR0aCc6c3RyKHJhbmRvbS5yYW5kaW50KDJlNywzZTcpKSwNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAneC1mYi1jb25uZWN0aW9uLXF1YWxpdHknOidFWENFTExFTlQnLA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICd4LWZiLWZyaWVuZGx5LW5hbWUnOidhdXRoZW50aWNhdGUnLA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdhY2NlcHQtZW5jb2RpbmcnOidnemlwLCBkZWZsYXRlJywNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAneC1mYi1odHRwLWVuZ2luZSc6ICAgICAnTGlnZXInfQ0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB1cmwgPSAnaHR0cHM6Ly9iLWFwaS5mYWNlYm9vay5jb20vbWV0aG9kL2F1dGgubG9naW4nDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBvID0gcmVxdWVzdHMucG9zdCh1cmwsZGF0YT1kYXRhLGhlYWRlcnM9aGVhZCxhbGxvd19yZWRpcmVjdHM9RmFsc2UpLnRleHQNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcSA9IGpzb24ubG9hZHMocG8pDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICdzZXNzaW9uX2tleScgaW4gcToNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwcmludChmJ1xyXHJcMDMzWzE7MzJtIFtERVhURVItTElWRV0gJytpZHMrJyB8ICcrcGFzKydcMDMzWzE7OTdtJykNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvcGVuKGYnL3NkY2FyZC9ERVhURVItTElWRS1NNS50eHQnLCdhJykud3JpdGUoaWRzKyd8JytwYXMrJ1xuJyk7b3BlbihmJy9zZGNhcmQvREVYVEVSLUxJVkUtQ09PS0lFLU01LnR4dCcsICdhJykud3JpdGUoaWRzKyd8JytwYXMrJ3wnK2t1a2krJ1xuJykNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAjY2VrX2FwayhzZXNzaW9uLGNva2kpDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb2tzLmFwcGVuZChpZHMpDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZWxpZiAnd3d3LmZhY2Vib29rLmNvbScgaW4gcVsnZXJyb3JfbXNnJ106DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgJ3knIGluIHBjcDoNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHByaW50KGYnXHJcclx4MWJbMTszMW0gW0RFWFRFUi1ERUFEXSAnK2lkcysnIHwgJytwYXMrJ1wwMzNbMTs5N20nKQ0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb3BlbihmJy9zZGNhcmQvREVYVEVSLURFQUQudHh0JywgJ2EnKS53cml0ZShpZHMrJ3wnK3BhcysnXG4nKQ0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY3BzLmFwcGVuZChpZHMpDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaw0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbHNlOg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlDQogICAgICAgICAgICAgICAgICAgICAgICBsb29wKz0xDQogICAgICAgICAgICAgICAgZXhjZXB0IHJlcXVlc3RzLmV4Y2VwdGlvbnMuQ29ubmVjdGlvbkVycm9yOg0KICAgICAgICAgICAgICAgICAgICAgICAgdGltZS5zbGVlcCgxMCkNCiAgICAgICAgICAgICAgICBleGNlcHQgRXhjZXB0aW9uIGFzIGU6DQogICAgICAgICAgICAgICAgICAgICAgICBwYXNzDQpkZWYgTTYoaWRzLG5hbWVzLHBhc3NsaXN0KToNCiAgICAgICAgICAgICAgICB0cnk6DQogICAgICAgICAgICAgICAgICAgICAgICBnbG9iYWwgb2ssbG9vcA0KICAgICAgICAgICAgICAgICAgICAgICAgc3lzLnN0ZG91dC53cml0ZShmJ1xyXHJcMDMzWzE7MzdtIFtERVhURVItTTZdICVzfFwwMzNbMTszMm1PSzotJXMgXDAzM1sxOzM3bSclKGxvb3AsbGVuKG9rcykpKTtzeXMuc3Rkb3V0LmZsdXNoKCkNCiAgICAgICAgICAgICAgICAgICAgICAgIGZuID0gbmFtZXMuc3BsaXQoZicgJylbMF0NCiAgICAgICAgICAgICAgICAgICAgICAgIHRyeToNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbG4gPSBuYW1lcy5zcGxpdChmJyAnKVsxXQ0KICAgICAgICAgICAgICAgICAgICAgICAgZXhjZXB0Og0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsbiA9IGZuDQogICAgICAgICAgICAgICAgICAgICAgICBmb3IgcHcgaW4gcGFzc2xpc3Q6DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBhcyA9IHB3LnJlcGxhY2UoZidmaXJzdCcsZm4ubG93ZXIoKSkucmVwbGFjZShmJ0ZpcnN0JyxmbikucmVwbGFjZShmJ2xhc3QnLGxuLmxvd2VyKCkpLnJlcGxhY2UoZidMYXN0JyxsbikucmVwbGFjZShmJ05hbWUnLG5hbWVzKS5yZXBsYWNlKGYnbmFtZScsbmFtZXMubG93ZXIoKSkNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYXBwbGljYXRpb25fdmVyc2lvbiA9IHN0cihyYW5kb20ucmFuZGludCgxMTEsNTU1KSkrJy4wLjAuJytzdHIocmFuZG9tLnJhbmRyYW5nZSg5LDQ5KSkrc3RyKHJhbmRvbS5yYW5kaW50KDExMSw1NTUpKQ0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhcHBsaWNhdGlvbl92ZXJzaW9uX2NvZGU9c3RyKHJhbmRvbS5yYW5kaW50KDAwMDAwMDAwMCw5OTk5OTk5OTkpKQ0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmYnM9cmFuZG9tLmNob2ljZShmYmtzKQ0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBndHQ9cmFuZG9tLmNob2ljZSh4eHh4eCkNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZ3R0dD1yYW5kb20uY2hvaWNlKHh4eHh4KQ0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhbmRyb2lkX3ZlcnNpb249c3RyKHJhbmRvbS5yYW5kcmFuZ2UoNiwxMykpDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHVhX3N0cmluZyA9IGYnRE00UktrLzIuMS4wIChsaW5leDsgVTsgQW5kcm9pZCB7c3RyKGFuZHJvaWRfdmVyc2lvbil9LjAuMDsge3N0cihndHQpfSBCdWlsZC97c3RyKGd0dHQpfSBbRkJBTi9GQjRBO0ZCQVYve3N0cihhcHBsaWNhdGlvbl92ZXJzaW9uKX07RkJCVi97c3RyKGFwcGxpY2F0aW9uX3ZlcnNpb25fY29kZSl9O0ZCRE0vJysne2RlbnNpdHk9Mi4wLHdpZHRoPTcyMCxoZWlnaHQ9MTI4MH07JytmJ0ZCTEMvZW5fVVM7RkJSVi97c3RyKGFwcGxpY2F0aW9uX3ZlcnNpb25fY29kZSl9O0ZCQ1IvTW92aXN0YXI7RkJNRi9zYW1zdW5nO0ZCQkQvc2Ftc3VuZztGQlBOL3tzdHIoZmJzKX07RkJEVi97c3RyKGd0dCl9O0ZCU1YvNy4wO0ZCT1AvMTtGQkNBL2FybWVhYmktdjdhOmFybWVhYmk7XScNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGV2aWNlX2lkID0gc3RyKHV1aWQudXVpZDQoKSkNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYWRpZCA9IHN0cih1dWlkLnV1aWQ0KCkpDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEgPSB7J2FkaWQnOmFkaWQsDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ2VtYWlsJzppZHMsDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ3Bhc3N3b3JkJzpwYXMsDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ2NwbCc6J3RydWUnLA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdjcmVkZW50aWFsc190eXBlJzonZGV2aWNlX2Jhc2VkX2xvZ2luX3Bhc3N3b3JkJywNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAic291cmNlIjogImRldmljZV9iYXNlZF9sb2dpbiIsDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ2Vycm9yX2RldGFpbF90eXBlJzonYnV0dG9uX3dpdGhfZGlzYWJsZWQnLA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdzb3VyY2UnOidsb2dpbicsJ2Zvcm1hdCc6J2pzb24nLA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdnZW5lcmF0ZV9zZXNzaW9uX2Nvb2tpZXMnOicxJywNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnZ2VuZXJhdGVfYW5hbHl0aWNzX2NsYWltJzonMScsDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ2dlbmVyYXRlX21hY2hpbmVfaWQnOicxJywNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAibG9jYWxlIjoiZW5fVVMiLCJjbGllbnRfY291bnRyeV9jb2RlIjoiVVMiLA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdkZXZpY2UnOmd0dCwNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnZGV2aWNlX2lkJzphZGlkLA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICJtZXRob2QiOiAiYXV0aC5sb2dpbiIsDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgImZiX2FwaV9yZXFfZnJpZW5kbHlfbmFtZSI6ICJhdXRoZW50aWNhdGUiLA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICJmYl9hcGlfY2FsbGVyX2NsYXNzIjogImNvbS5mYWNlYm9vay5hY2NvdW50LmxvZ2luLnByb3RvY29sLkZiNGFBdXRoSGFuZGxlciJ9DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGhlYWQgPSB7DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ2NvbnRlbnQtdHlwZSc6J2FwcGxpY2F0aW9uL3gtd3d3LWZvcm0tdXJsZW5jb2RlZCcsDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ3gtZmItc2ltLWhuaSc6c3RyKHJhbmRvbS5yYW5kaW50KDJlNCw0ZTQpKSwNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAneC1mYi1jb25uZWN0aW9uLXR5cGUnOid1bmtub3duJywNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnQXV0aG9yaXphdGlvbic6J09BdXRoIDM1MDY4NTUzMTcyOHw2MmY4Y2U5Zjc0YjEyZjg0YzEyM2NjMjM0MzdhNGEzMicsDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ3VzZXItYWdlbnQnOnVhX3N0cmluZywNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAneC1mYi1uZXQtaG5pJzpzdHIocmFuZG9tLnJhbmRpbnQoMmU0LDRlNCkpLA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICd4LWZiLWNvbm5lY3Rpb24tYmFuZHdpZHRoJzpzdHIocmFuZG9tLnJhbmRpbnQoMmU3LDNlNykpLA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICd4LWZiLWNvbm5lY3Rpb24tcXVhbGl0eSc6J0VYQ0VMTEVOVCcsDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ3gtZmItZnJpZW5kbHktbmFtZSc6J2F1dGhlbnRpY2F0ZScsDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ2FjY2VwdC1lbmNvZGluZyc6J2d6aXAsIGRlZmxhdGUnLA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICd4LWZiLWh0dHAtZW5naW5lJzogICAgICdMaWdlcid9DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHVybCA9ICdodHRwczovL2ItYXBpLmZhY2Vib29rLmNvbS9tZXRob2QvYXV0aC5sb2dpbicNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcG8gPSByZXF1ZXN0cy5wb3N0KHVybCxkYXRhPWRhdGEsaGVhZGVycz1oZWFkLGFsbG93X3JlZGlyZWN0cz1GYWxzZSkudGV4dA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBxID0ganNvbi5sb2FkcyhwbykNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgJ3Nlc3Npb25fa2V5JyBpbiBxOg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHByaW50KGYnXHJcclwwMzNbMTszMm0gW0RFWFRFUi1MSVZFXSAnK2lkcysnIHwgJytwYXMrJ1wwMzNbMTs5N20nKQ0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9wZW4oZicvc2RjYXJkL0RFWFRFUi1MSVZFLU02LnR4dCcsJ2EnKS53cml0ZShpZHMrJ3wnK3BhcysnXG4nKTtvcGVuKGYnL3NkY2FyZC9ERVhURVItTElWRS1DT09LSUUtTTYudHh0JywgJ2EnKS53cml0ZShpZHMrJ3wnK3BhcysnfCcra3VraSsnXG4nKQ0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICNjZWtfYXBrKHNlc3Npb24sY29raSkNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBva3MuYXBwZW5kKGlkcykNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaw0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbGlmICd3d3cuZmFjZWJvb2suY29tJyBpbiBxWydlcnJvcl9tc2cnXToNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAneScgaW4gcGNwOg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcHJpbnQoZidcclxyXHgxYlsxOzMxbSBbREVYVEVSLURFQURdICcraWRzKycgfCAnK3BhcysnXDAzM1sxOzk3bScpDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvcGVuKGYnL3NkY2FyZC9ERVhURVItREVBRC50eHQnLCAnYScpLndyaXRlKGlkcysnfCcrcGFzKydcbicpDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjcHMuYXBwZW5kKGlkcykNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsc2U6DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29udGludWUNCiAgICAgICAgICAgICAgICAgICAgICAgIGxvb3ArPTENCiAgICAgICAgICAgICAgICBleGNlcHQgcmVxdWVzdHMuZXhjZXB0aW9ucy5Db25uZWN0aW9uRXJyb3I6DQogICAgICAgICAgICAgICAgICAgICAgICB0aW1lLnNsZWVwKDEwKQ0KICAgICAgICAgICAgICAgIGV4Y2VwdCBFeGNlcHRpb24gYXMgZToNCiAgICAgICAgICAgICAgICAgICAgICAgIHBhc3MNCmRlZiBNNyhpZHMsbmFtZXMscGFzc2xpc3QpOg0KICAgICAgICAgICAgICAgIHRyeToNCiAgICAgICAgICAgICAgICAgICAgICAgIGdsb2JhbCBvayxsb29wDQogICAgICAgICAgICAgICAgICAgICAgICBzeXMuc3Rkb3V0LndyaXRlKGYnXHJcclwwMzNbMTszN20gW0RFWFRFUi1NN10gJXN8XDAzM1sxOzMybU9LOi0lcyBcMDMzWzE7MzdtJyUobG9vcCxsZW4ob2tzKSkpO3N5cy5zdGRvdXQuZmx1c2goKQ0KICAgICAgICAgICAgICAgICAgICAgICAgZm4gPSBuYW1lcy5zcGxpdChmJyAnKVswXQ0KICAgICAgICAgICAgICAgICAgICAgICAgdHJ5Og0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsbiA9IG5hbWVzLnNwbGl0KGYnICcpWzFdDQogICAgICAgICAgICAgICAgICAgICAgICBleGNlcHQ6DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxuID0gZm4NCiAgICAgICAgICAgICAgICAgICAgICAgIGZvciBwdyBpbiBwYXNzbGlzdDoNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcGFzID0gcHcucmVwbGFjZShmJ2ZpcnN0Jyxmbi5sb3dlcigpKS5yZXBsYWNlKGYnRmlyc3QnLGZuKS5yZXBsYWNlKGYnbGFzdCcsbG4ubG93ZXIoKSkucmVwbGFjZShmJ0xhc3QnLGxuKS5yZXBsYWNlKGYnTmFtZScsbmFtZXMpLnJlcGxhY2UoZiduYW1lJyxuYW1lcy5sb3dlcigpKQ0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhcHBsaWNhdGlvbl92ZXJzaW9uID0gc3RyKHJhbmRvbS5yYW5kaW50KDExMSw1NTUpKSsnLjAuMC4nK3N0cihyYW5kb20ucmFuZHJhbmdlKDksNDkpKStzdHIocmFuZG9tLnJhbmRpbnQoMTExLDU1NSkpDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFwcGxpY2F0aW9uX3ZlcnNpb25fY29kZT1zdHIocmFuZG9tLnJhbmRpbnQoMDAwMDAwMDAwLDk5OTk5OTk5OSkpDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZicz1yYW5kb20uY2hvaWNlKGZia3MpDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGd0dD1yYW5kb20uY2hvaWNlKHh4eHh4KQ0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBndHR0PXJhbmRvbS5jaG9pY2UoeHh4eHgpDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFuZHJvaWRfdmVyc2lvbj1zdHIocmFuZG9tLnJhbmRyYW5nZSg2LDEzKSkNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdWFfc3RyaW5nID0gZidETTRSS2svMi4xLjAgKGxpbmV4OyBVOyBBbmRyb2lkIHtzdHIoYW5kcm9pZF92ZXJzaW9uKX0uMC4wOyB7c3RyKGd0dCl9IEJ1aWxkL3tzdHIoZ3R0dCl9IFtGQkFOL0ZCNEE7RkJBVi97c3RyKGFwcGxpY2F0aW9uX3ZlcnNpb24pfTtGQkJWL3tzdHIoYXBwbGljYXRpb25fdmVyc2lvbl9jb2RlKX07RkJETS8nKyd7ZGVuc2l0eT0yLjAsd2lkdGg9NzIwLGhlaWdodD0xMjgwfTsnK2YnRkJMQy9lbl9VUztGQlJWL3tzdHIoYXBwbGljYXRpb25fdmVyc2lvbl9jb2RlKX07RkJDUi9Nb3Zpc3RhcjtGQk1GL3NhbXN1bmc7RkJCRC9zYW1zdW5nO0ZCUE4ve3N0cihmYnMpfTtGQkRWL3tzdHIoZ3R0KX07RkJTVi83LjA7RkJPUC8xO0ZCQ0EvYXJtZWFiaS12N2E6YXJtZWFiaTtdJw0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkZXZpY2VfaWQgPSBzdHIodXVpZC51dWlkNCgpKQ0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhZGlkID0gc3RyKHV1aWQudXVpZDQoKSkNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0YSA9IHsnYWRpZCc6YWRpZCwNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnZW1haWwnOmlkcywNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAncGFzc3dvcmQnOnBhcywNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnY3BsJzondHJ1ZScsDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ2NyZWRlbnRpYWxzX3R5cGUnOidkZXZpY2VfYmFzZWRfbG9naW5fcGFzc3dvcmQnLA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICJzb3VyY2UiOiAiZGV2aWNlX2Jhc2VkX2xvZ2luIiwNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnZXJyb3JfZGV0YWlsX3R5cGUnOididXR0b25fd2l0aF9kaXNhYmxlZCcsDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ3NvdXJjZSc6J2xvZ2luJywnZm9ybWF0JzonanNvbicsDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ2dlbmVyYXRlX3Nlc3Npb25fY29va2llcyc6JzEnLA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdnZW5lcmF0ZV9hbmFseXRpY3NfY2xhaW0nOicxJywNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnZ2VuZXJhdGVfbWFjaGluZV9pZCc6JzEnLA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICJsb2NhbGUiOiJlbl9VUyIsImNsaWVudF9jb3VudHJ5X2NvZGUiOiJVUyIsDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ2RldmljZSc6Z3R0LA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdkZXZpY2VfaWQnOmFkaWQsDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIm1ldGhvZCI6ICJhdXRoLmxvZ2luIiwNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAiZmJfYXBpX3JlcV9mcmllbmRseV9uYW1lIjogImF1dGhlbnRpY2F0ZSIsDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgImZiX2FwaV9jYWxsZXJfY2xhc3MiOiAiY29tLmZhY2Vib29rLmFjY291bnQubG9naW4ucHJvdG9jb2wuRmI0YUF1dGhIYW5kbGVyIn0NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaGVhZCA9IHsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnY29udGVudC10eXBlJzonYXBwbGljYXRpb24veC13d3ctZm9ybS11cmxlbmNvZGVkJywNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAneC1mYi1zaW0taG5pJzpzdHIocmFuZG9tLnJhbmRpbnQoMmU0LDRlNCkpLA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICd4LWZiLWNvbm5lY3Rpb24tdHlwZSc6J3Vua25vd24nLA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdBdXRob3JpemF0aW9uJzonT0F1dGggMzUwNjg1NTMxNzI4fDYyZjhjZTlmNzRiMTJmODRjMTIzY2MyMzQzN2E0YTMyJywNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAndXNlci1hZ2VudCc6dWFfc3RyaW5nLA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICd4LWZiLW5ldC1obmknOnN0cihyYW5kb20ucmFuZGludCgyZTQsNGU0KSksDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ3gtZmItY29ubmVjdGlvbi1iYW5kd2lkdGgnOnN0cihyYW5kb20ucmFuZGludCgyZTcsM2U3KSksDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ3gtZmItY29ubmVjdGlvbi1xdWFsaXR5JzonRVhDRUxMRU5UJywNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAneC1mYi1mcmllbmRseS1uYW1lJzonYXV0aGVudGljYXRlJywNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnYWNjZXB0LWVuY29kaW5nJzonZ3ppcCwgZGVmbGF0ZScsDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ3gtZmItaHR0cC1lbmdpbmUnOiAgICAgJ0xpZ2VyJ30NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdXJsID0gJ2h0dHBzOi8vYi1hcGkuZmFjZWJvb2suY29tL21ldGhvZC9hdXRoLmxvZ2luJw0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwbyA9IHJlcXVlc3RzLnBvc3QodXJsLGRhdGE9ZGF0YSxoZWFkZXJzPWhlYWQsYWxsb3dfcmVkaXJlY3RzPUZhbHNlKS50ZXh0DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHEgPSBqc29uLmxvYWRzKHBvKQ0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAnc2Vzc2lvbl9rZXknIGluIHE6DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcHJpbnQoZidcclxyXDAzM1sxOzMybSBbREVYVEVSLUxJVkVdICcraWRzKycgfCAnK3BhcysnXDAzM1sxOzk3bScpDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb3BlbihmJy9zZGNhcmQvREVYVEVSLUxJVkUtTTcudHh0JywnYScpLndyaXRlKGlkcysnfCcrcGFzKydcbicpO29wZW4oZicvc2RjYXJkL0RFWFRFUi1MSVZFLUNPT0tJRS1NNy50eHQnLCAnYScpLndyaXRlKGlkcysnfCcrcGFzKyd8JytrdWtpKydcbicpDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgI2Nla19hcGsoc2Vzc2lvbixjb2tpKQ0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9rcy5hcHBlbmQoaWRzKQ0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsaWYgJ3d3dy5mYWNlYm9vay5jb20nIGluIHFbJ2Vycm9yX21zZyddOg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICd5JyBpbiBwY3A6DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwcmludChmJ1xyXHJceDFiWzE7MzFtIFtERVhURVItREVBRF0gJytpZHMrJyB8ICcrcGFzKydcMDMzWzE7OTdtJykNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9wZW4oZicvc2RjYXJkL0RFWFRFUi1ERUFELnR4dCcsICdhJykud3JpdGUoaWRzKyd8JytwYXMrJ1xuJykNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNwcy5hcHBlbmQoaWRzKQ0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZWxzZToNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb250aW51ZQ0KICAgICAgICAgICAgICAgICAgICAgICAgbG9vcCs9MQ0KICAgICAgICAgICAgICAgIGV4Y2VwdCByZXF1ZXN0cy5leGNlcHRpb25zLkNvbm5lY3Rpb25FcnJvcjoNCiAgICAgICAgICAgICAgICAgICAgICAgIHRpbWUuc2xlZXAoMTApDQogICAgICAgICAgICAgICAgZXhjZXB0IEV4Y2VwdGlvbiBhcyBlOg0KICAgICAgICAgICAgICAgICAgICAgICAgcGFzcw0KZGVmIE04KGlkcyxuYW1lcyxwYXNzbGlzdCk6DQogICAgICAgICAgICAgICAgdHJ5Og0KICAgICAgICAgICAgICAgICAgICAgICAgZ2xvYmFsIG9rLGxvb3ANCiAgICAgICAgICAgICAgICAgICAgICAgIHN5cy5zdGRvdXQud3JpdGUoZidcclxyXDAzM1sxOzM3bSBbREVYVEVSLU04XSAlc3xcMDMzWzE7MzJtT0s6LSVzIFwwMzNbMTszN20nJShsb29wLGxlbihva3MpKSk7c3lzLnN0ZG91dC5mbHVzaCgpDQogICAgICAgICAgICAgICAgICAgICAgICBmbiA9IG5hbWVzLnNwbGl0KGYnICcpWzBdDQogICAgICAgICAgICAgICAgICAgICAgICB0cnk6DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxuID0gbmFtZXMuc3BsaXQoZicgJylbMV0NCiAgICAgICAgICAgICAgICAgICAgICAgIGV4Y2VwdDoNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbG4gPSBmbg0KICAgICAgICAgICAgICAgICAgICAgICAgZm9yIHB3IGluIHBhc3NsaXN0Og0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwYXMgPSBwdy5yZXBsYWNlKGYnZmlyc3QnLGZuLmxvd2VyKCkpLnJlcGxhY2UoZidGaXJzdCcsZm4pLnJlcGxhY2UoZidsYXN0Jyxsbi5sb3dlcigpKS5yZXBsYWNlKGYnTGFzdCcsbG4pLnJlcGxhY2UoZidOYW1lJyxuYW1lcykucmVwbGFjZShmJ25hbWUnLG5hbWVzLmxvd2VyKCkpDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFwcGxpY2F0aW9uX3ZlcnNpb24gPSBzdHIocmFuZG9tLnJhbmRpbnQoMTExLDU1NSkpKycuMC4wLicrc3RyKHJhbmRvbS5yYW5kcmFuZ2UoOSw0OSkpK3N0cihyYW5kb20ucmFuZGludCgxMTEsNTU1KSkNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYXBwbGljYXRpb25fdmVyc2lvbl9jb2RlPXN0cihyYW5kb20ucmFuZGludCgwMDAwMDAwMDAsOTk5OTk5OTk5KSkNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZmJzPXJhbmRvbS5jaG9pY2UoZmJrcykNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZ3R0PXJhbmRvbS5jaG9pY2UoeHh4eHgpDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGd0dHQ9cmFuZG9tLmNob2ljZSh4eHh4eCkNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYW5kcm9pZF92ZXJzaW9uPXN0cihyYW5kb20ucmFuZHJhbmdlKDYsMTMpKQ0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB1YV9zdHJpbmcgPSBmJ0RNNFJLay8yLjEuMCAobGluZXg7IFU7IEFuZHJvaWQge3N0cihhbmRyb2lkX3ZlcnNpb24pfS4wLjA7IHtzdHIoZ3R0KX0gQnVpbGQve3N0cihndHR0KX0gW0ZCQU4vRkI0QTtGQkFWL3tzdHIoYXBwbGljYXRpb25fdmVyc2lvbil9O0ZCQlYve3N0cihhcHBsaWNhdGlvbl92ZXJzaW9uX2NvZGUpfTtGQkRNLycrJ3tkZW5zaXR5PTIuMCx3aWR0aD03MjAsaGVpZ2h0PTEyODB9OycrZidGQkxDL2VuX1VTO0ZCUlYve3N0cihhcHBsaWNhdGlvbl92ZXJzaW9uX2NvZGUpfTtGQkNSL01vdmlzdGFyO0ZCTUYvc2Ftc3VuZztGQkJEL3NhbXN1bmc7RkJQTi97c3RyKGZicyl9O0ZCRFYve3N0cihndHQpfTtGQlNWLzcuMDtGQk9QLzE7RkJDQS9hcm1lYWJpLXY3YTphcm1lYWJpO10nDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRldmljZV9pZCA9IHN0cih1dWlkLnV1aWQ0KCkpDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFkaWQgPSBzdHIodXVpZC51dWlkNCgpKQ0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhID0geydhZGlkJzphZGlkLA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdlbWFpbCc6aWRzLA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdwYXNzd29yZCc6cGFzLA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdjcGwnOid0cnVlJywNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnY3JlZGVudGlhbHNfdHlwZSc6J2RldmljZV9iYXNlZF9sb2dpbl9wYXNzd29yZCcsDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgInNvdXJjZSI6ICJkZXZpY2VfYmFzZWRfbG9naW4iLA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdlcnJvcl9kZXRhaWxfdHlwZSc6J2J1dHRvbl93aXRoX2Rpc2FibGVkJywNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnc291cmNlJzonbG9naW4nLCdmb3JtYXQnOidqc29uJywNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnZ2VuZXJhdGVfc2Vzc2lvbl9jb29raWVzJzonMScsDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ2dlbmVyYXRlX2FuYWx5dGljc19jbGFpbSc6JzEnLA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdnZW5lcmF0ZV9tYWNoaW5lX2lkJzonMScsDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgImxvY2FsZSI6ImVuX1VTIiwiY2xpZW50X2NvdW50cnlfY29kZSI6IlVTIiwNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnZGV2aWNlJzpndHQsDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ2RldmljZV9pZCc6YWRpZCwNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAibWV0aG9kIjogImF1dGgubG9naW4iLA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICJmYl9hcGlfcmVxX2ZyaWVuZGx5X25hbWUiOiAiYXV0aGVudGljYXRlIiwNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAiZmJfYXBpX2NhbGxlcl9jbGFzcyI6ICJjb20uZmFjZWJvb2suYWNjb3VudC5sb2dpbi5wcm90b2NvbC5GYjRhQXV0aEhhbmRsZXIifQ0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBoZWFkID0gew0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdjb250ZW50LXR5cGUnOidhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWQnLA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICd4LWZiLXNpbS1obmknOnN0cihyYW5kb20ucmFuZGludCgyZTQsNGU0KSksDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ3gtZmItY29ubmVjdGlvbi10eXBlJzondW5rbm93bicsDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ0F1dGhvcml6YXRpb24nOidPQXV0aCAzNTA2ODU1MzE3Mjh8NjJmOGNlOWY3NGIxMmY4NGMxMjNjYzIzNDM3YTRhMzInLA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICd1c2VyLWFnZW50Jzp1YV9zdHJpbmcsDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ3gtZmItbmV0LWhuaSc6c3RyKHJhbmRvbS5yYW5kaW50KDJlNCw0ZTQpKSwNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAneC1mYi1jb25uZWN0aW9uLWJhbmR3aWR0aCc6c3RyKHJhbmRvbS5yYW5kaW50KDJlNywzZTcpKSwNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAneC1mYi1jb25uZWN0aW9uLXF1YWxpdHknOidFWENFTExFTlQnLA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICd4LWZiLWZyaWVuZGx5LW5hbWUnOidhdXRoZW50aWNhdGUnLA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdhY2NlcHQtZW5jb2RpbmcnOidnemlwLCBkZWZsYXRlJywNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAneC1mYi1odHRwLWVuZ2luZSc6ICAgICAnTGlnZXInfQ0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB1cmwgPSAnaHR0cHM6Ly9iLWFwaS5mYWNlYm9vay5jb20vbWV0aG9kL2F1dGgubG9naW4nDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBvID0gcmVxdWVzdHMucG9zdCh1cmwsZGF0YT1kYXRhLGhlYWRlcnM9aGVhZCxhbGxvd19yZWRpcmVjdHM9RmFsc2UpLnRleHQNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcSA9IGpzb24ubG9hZHMocG8pDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICdzZXNzaW9uX2tleScgaW4gcToNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwcmludChmJ1xyXHJcMDMzWzE7MzJtIFtERVhURVItTElWRV0gJytpZHMrJyB8ICcrcGFzKydcMDMzWzE7OTdtJykNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvcGVuKGYnL3NkY2FyZC9ERVhURVItTElWRS1NOC50eHQnLCdhJykud3JpdGUoaWRzKyd8JytwYXMrJ1xuJyk7b3BlbihmJy9zZGNhcmQvREVYVEVSLUxJVkUtQ09PS0lFLU04LnR4dCcsICdhJykud3JpdGUoaWRzKyd8JytwYXMrJ3wnK2t1a2krJ1xuJykNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAjY2VrX2FwayhzZXNzaW9uLGNva2kpDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb2tzLmFwcGVuZChpZHMpDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZWxpZiAnd3d3LmZhY2Vib29rLmNvbScgaW4gcVsnZXJyb3JfbXNnJ106DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgJ3knIGluIHBjcDoNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHByaW50KGYnXHJcclx4MWJbMTszMW0gW0RFWFRFUi1ERUFEXSAnK2lkcysnIHwgJytwYXMrJ1wwMzNbMTs5N20nKQ0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb3BlbihmJy9zZGNhcmQvREVYVEVSLURFQUQudHh0JywgJ2EnKS53cml0ZShpZHMrJ3wnK3BhcysnXG4nKQ0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY3BzLmFwcGVuZChpZHMpDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaw0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbHNlOg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlDQogICAgICAgICAgICAgICAgICAgICAgICBsb29wKz0xDQogICAgICAgICAgICAgICAgZXhjZXB0IHJlcXVlc3RzLmV4Y2VwdGlvbnMuQ29ubmVjdGlvbkVycm9yOg0KICAgICAgICAgICAgICAgICAgICAgICAgdGltZS5zbGVlcCgxMCkNCiAgICAgICAgICAgICAgICBleGNlcHQgRXhjZXB0aW9uIGFzIGU6DQogICAgICAgICAgICAgICAgICAgICAgICBwYXNzDQpkZWYgTTkoaWRzLG5hbWVzLHBhc3NsaXN0KToNCiAgICAgICAgICAgICAgICB0cnk6DQogICAgICAgICAgICAgICAgICAgICAgICBnbG9iYWwgb2ssbG9vcA0KICAgICAgICAgICAgICAgICAgICAgICAgc3lzLnN0ZG91dC53cml0ZShmJ1xyXHJcMDMzWzE7MzdtIFtERVhURVItTTldICVzfFwwMzNbMTszMm1PSzotJXMgXDAzM1sxOzM3bSclKGxvb3AsbGVuKG9rcykpKTtzeXMuc3Rkb3V0LmZsdXNoKCkNCiAgICAgICAgICAgICAgICAgICAgICAgIGZuID0gbmFtZXMuc3BsaXQoZicgJylbMF0NCiAgICAgICAgICAgICAgICAgICAgICAgIHRyeToNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbG4gPSBuYW1lcy5zcGxpdChmJyAnKVsxXQ0KICAgICAgICAgICAgICAgICAgICAgICAgZXhjZXB0Og0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsbiA9IGZuDQogICAgICAgICAgICAgICAgICAgICAgICBmb3IgcHcgaW4gcGFzc2xpc3Q6DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBhcyA9IHB3LnJlcGxhY2UoZidmaXJzdCcsZm4ubG93ZXIoKSkucmVwbGFjZShmJ0ZpcnN0JyxmbikucmVwbGFjZShmJ2xhc3QnLGxuLmxvd2VyKCkpLnJlcGxhY2UoZidMYXN0JyxsbikucmVwbGFjZShmJ05hbWUnLG5hbWVzKS5yZXBsYWNlKGYnbmFtZScsbmFtZXMubG93ZXIoKSkNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYXBwbGljYXRpb25fdmVyc2lvbiA9IHN0cihyYW5kb20ucmFuZGludCgxMTEsNTU1KSkrJy4wLjAuJytzdHIocmFuZG9tLnJhbmRyYW5nZSg5LDQ5KSkrc3RyKHJhbmRvbS5yYW5kaW50KDExMSw1NTUpKQ0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhcHBsaWNhdGlvbl92ZXJzaW9uX2NvZGU9c3RyKHJhbmRvbS5yYW5kaW50KDAwMDAwMDAwMCw5OTk5OTk5OTkpKQ0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmYnM9cmFuZG9tLmNob2ljZShmYmtzKQ0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBndHQ9cmFuZG9tLmNob2ljZSh4eHh4eCkNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZ3R0dD1yYW5kb20uY2hvaWNlKHh4eHh4KQ0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhbmRyb2lkX3ZlcnNpb249c3RyKHJhbmRvbS5yYW5kcmFuZ2UoNiwxMykpDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHVhX3N0cmluZyA9IGYnRE00UktrLzIuMS4wIChsaW5leDsgVTsgQW5kcm9pZCB7c3RyKGFuZHJvaWRfdmVyc2lvbil9LjAuMDsge3N0cihndHQpfSBCdWlsZC97c3RyKGd0dHQpfSBbRkJBTi9GQjRBO0ZCQVYve3N0cihhcHBsaWNhdGlvbl92ZXJzaW9uKX07RkJCVi97c3RyKGFwcGxpY2F0aW9uX3ZlcnNpb25fY29kZSl9O0ZCRE0vJysne2RlbnNpdHk9Mi4wLHdpZHRoPTcyMCxoZWlnaHQ9MTI4MH07JytmJ0ZCTEMvZW5fVVM7RkJSVi97c3RyKGFwcGxpY2F0aW9uX3ZlcnNpb25fY29kZSl9O0ZCQ1IvTW92aXN0YXI7RkJNRi9zYW1zdW5nO0ZCQkQvc2Ftc3VuZztGQlBOL3tzdHIoZmJzKX07RkJEVi97c3RyKGd0dCl9O0ZCU1YvNy4wO0ZCT1AvMTtGQkNBL2FybWVhYmktdjdhOmFybWVhYmk7XScNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGV2aWNlX2lkID0gc3RyKHV1aWQudXVpZDQoKSkNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYWRpZCA9IHN0cih1dWlkLnV1aWQ0KCkpDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEgPSB7J2FkaWQnOmFkaWQsDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ2VtYWlsJzppZHMsDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ3Bhc3N3b3JkJzpwYXMsDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ2NwbCc6J3RydWUnLA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdjcmVkZW50aWFsc190eXBlJzonZGV2aWNlX2Jhc2VkX2xvZ2luX3Bhc3N3b3JkJywNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAic291cmNlIjogImRldmljZV9iYXNlZF9sb2dpbiIsDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ2Vycm9yX2RldGFpbF90eXBlJzonYnV0dG9uX3dpdGhfZGlzYWJsZWQnLA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdzb3VyY2UnOidsb2dpbicsJ2Zvcm1hdCc6J2pzb24nLA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdnZW5lcmF0ZV9zZXNzaW9uX2Nvb2tpZXMnOicxJywNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnZ2VuZXJhdGVfYW5hbHl0aWNzX2NsYWltJzonMScsDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ2dlbmVyYXRlX21hY2hpbmVfaWQnOicxJywNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAibG9jYWxlIjoiZW5fVVMiLCJjbGllbnRfY291bnRyeV9jb2RlIjoiVVMiLA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdkZXZpY2UnOmd0dCwNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnZGV2aWNlX2lkJzphZGlkLA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICJtZXRob2QiOiAiYXV0aC5sb2dpbiIsDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgImZiX2FwaV9yZXFfZnJpZW5kbHlfbmFtZSI6ICJhdXRoZW50aWNhdGUiLA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICJmYl9hcGlfY2FsbGVyX2NsYXNzIjogImNvbS5mYWNlYm9vay5hY2NvdW50LmxvZ2luLnByb3RvY29sLkZiNGFBdXRoSGFuZGxlciJ9DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGhlYWQgPSB7DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ2NvbnRlbnQtdHlwZSc6J2FwcGxpY2F0aW9uL3gtd3d3LWZvcm0tdXJsZW5jb2RlZCcsDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ3gtZmItc2ltLWhuaSc6c3RyKHJhbmRvbS5yYW5kaW50KDJlNCw0ZTQpKSwNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAneC1mYi1jb25uZWN0aW9uLXR5cGUnOid1bmtub3duJywNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnQXV0aG9yaXphdGlvbic6J09BdXRoIDM1MDY4NTUzMTcyOHw2MmY4Y2U5Zjc0YjEyZjg0YzEyM2NjMjM0MzdhNGEzMicsDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ3VzZXItYWdlbnQnOnVhX3N0cmluZywNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAneC1mYi1uZXQtaG5pJzpzdHIocmFuZG9tLnJhbmRpbnQoMmU0LDRlNCkpLA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICd4LWZiLWNvbm5lY3Rpb24tYmFuZHdpZHRoJzpzdHIocmFuZG9tLnJhbmRpbnQoMmU3LDNlNykpLA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICd4LWZiLWNvbm5lY3Rpb24tcXVhbGl0eSc6J0VYQ0VMTEVOVCcsDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ3gtZmItZnJpZW5kbHktbmFtZSc6J2F1dGhlbnRpY2F0ZScsDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ2FjY2VwdC1lbmNvZGluZyc6J2d6aXAsIGRlZmxhdGUnLA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICd4LWZiLWh0dHAtZW5naW5lJzogICAgICdMaWdlcid9DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHVybCA9ICdodHRwczovL2ItYXBpLmZhY2Vib29rLmNvbS9tZXRob2QvYXV0aC5sb2dpbicNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcG8gPSByZXF1ZXN0cy5wb3N0KHVybCxkYXRhPWRhdGEsaGVhZGVycz1oZWFkLGFsbG93X3JlZGlyZWN0cz1GYWxzZSkudGV4dA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBxID0ganNvbi5sb2FkcyhwbykNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgJ3Nlc3Npb25fa2V5JyBpbiBxOg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHByaW50KGYnXHJcclwwMzNbMTszMm0gW0RFWFRFUi1MSVZFXSAnK2lkcysnIHwgJytwYXMrJ1wwMzNbMTs5N20nKQ0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9wZW4oZicvc2RjYXJkL0RFWFRFUi1MSVZFLU05LnR4dCcsJ2EnKS53cml0ZShpZHMrJ3wnK3BhcysnXG4nKTtvcGVuKGYnL3NkY2FyZC9ERVhURVItTElWRS1DT09LSUUtTTkudHh0JywgJ2EnKS53cml0ZShpZHMrJ3wnK3BhcysnfCcra3VraSsnXG4nKQ0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICNjZWtfYXBrKHNlc3Npb24sY29raSkNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBva3MuYXBwZW5kKGlkcykNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaw0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbGlmICd3d3cuZmFjZWJvb2suY29tJyBpbiBxWydlcnJvcl9tc2cnXToNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAneScgaW4gcGNwOg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcHJpbnQoZidcclxyXHgxYlsxOzMxbSBbREVYVEVSLURFQURdICcraWRzKycgfCAnK3BhcysnXDAzM1sxOzk3bScpDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvcGVuKGYnL3NkY2FyZC9ERVhURVItREVBRC50eHQnLCAnYScpLndyaXRlKGlkcysnfCcrcGFzKydcbicpDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjcHMuYXBwZW5kKGlkcykNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsc2U6DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29udGludWUNCiAgICAgICAgICAgICAgICAgICAgICAgIGxvb3ArPTENCiAgICAgICAgICAgICAgICBleGNlcHQgcmVxdWVzdHMuZXhjZXB0aW9ucy5Db25uZWN0aW9uRXJyb3I6DQogICAgICAgICAgICAgICAgICAgICAgICB0aW1lLnNsZWVwKDEwKQ0KICAgICAgICAgICAgICAgIGV4Y2VwdCBFeGNlcHRpb24gYXMgZToNCiAgICAgICAgICAgICAgICAgICAgICAgIHBhc3MNCmRlZiBNMTAoaWRzLG5hbWVzLHBhc3NsaXN0KToNCiAgICAgICAgICAgICAgICB0cnk6DQogICAgICAgICAgICAgICAgICAgICAgICBnbG9iYWwgb2ssbG9vcA0KICAgICAgICAgICAgICAgICAgICAgICAgc3lzLnN0ZG91dC53cml0ZShmJ1xyXHJcMDMzWzE7MzdtIFtERVhURVItTTEwXSAlc3xcMDMzWzE7MzJtT0s6LSVzIFwwMzNbMTszN20nJShsb29wLGxlbihva3MpKSk7c3lzLnN0ZG91dC5mbHVzaCgpDQogICAgICAgICAgICAgICAgICAgICAgICBmbiA9IG5hbWVzLnNwbGl0KGYnICcpWzBdDQogICAgICAgICAgICAgICAgICAgICAgICB0cnk6DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxuID0gbmFtZXMuc3BsaXQoZicgJylbMV0NCiAgICAgICAgICAgICAgICAgICAgICAgIGV4Y2VwdDoNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbG4gPSBmbg0KICAgICAgICAgICAgICAgICAgICAgICAgZm9yIHB3IGluIHBhc3NsaXN0Og0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwYXMgPSBwdy5yZXBsYWNlKGYnZmlyc3QnLGZuLmxvd2VyKCkpLnJlcGxhY2UoZidGaXJzdCcsZm4pLnJlcGxhY2UoZidsYXN0Jyxsbi5sb3dlcigpKS5yZXBsYWNlKGYnTGFzdCcsbG4pLnJlcGxhY2UoZidOYW1lJyxuYW1lcykucmVwbGFjZShmJ25hbWUnLG5hbWVzLmxvd2VyKCkpDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFwcGxpY2F0aW9uX3ZlcnNpb24gPSBzdHIocmFuZG9tLnJhbmRpbnQoMTExLDU1NSkpKycuMC4wLicrc3RyKHJhbmRvbS5yYW5kcmFuZ2UoOSw0OSkpK3N0cihyYW5kb20ucmFuZGludCgxMTEsNTU1KSkNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYXBwbGljYXRpb25fdmVyc2lvbl9jb2RlPXN0cihyYW5kb20ucmFuZGludCgwMDAwMDAwMDAsOTk5OTk5OTk5KSkNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZmJzPXJhbmRvbS5jaG9pY2UoZmJrcykNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZ3R0PXJhbmRvbS5jaG9pY2UoeHh4eHgpDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGd0dHQ9cmFuZG9tLmNob2ljZSh4eHh4eCkNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYW5kcm9pZF92ZXJzaW9uPXN0cihyYW5kb20ucmFuZHJhbmdlKDYsMTMpKQ0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB1YV9zdHJpbmcgPSBmJ0RERVhURVJrLzIuMS4wIChsaW5leDsgVTsgQW5kcm9pZCB7c3RyKGFuZHJvaWRfdmVyc2lvbil9LjAuMDsge3N0cihndHQpfSBCdWlsZC97c3RyKGd0dHQpfSBbRkJBTi9GQjRBO0ZCQVYve3N0cihhcHBsaWNhdGlvbl92ZXJzaW9uKX07RkJCVi97c3RyKGFwcGxpY2F0aW9uX3ZlcnNpb25fY29kZSl9O0ZCRE0vJysne2RlbnNpdHk9Mi4wLHdpZHRoPTcyMCxoZWlnaHQ9MTI4MH07JytmJ0ZCTEMvZXNfQ1U7RkJSVi97c3RyKGFwcGxpY2F0aW9uX3ZlcnNpb25fY29kZSl9O0ZCQ1IvTW92aXN0YXI7RkJNRi9zYW1zdW5nO0ZCQkQvc2Ftc3VuZztGQlBOL3tzdHIoZmJzKX07RkJEVi97c3RyKGd0dCl9O0ZCU1YvNy4wO0ZCT1AvMTtGQkNBL2FybWVhYmktdjdhOmFybWVhYmk7XScNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGV2aWNlX2lkID0gc3RyKHV1aWQudXVpZDQoKSkNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYWRpZCA9IHN0cih1dWlkLnV1aWQ0KCkpDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEgPSB7J2FkaWQnOmFkaWQsDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ2VtYWlsJzppZHMsDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ3Bhc3N3b3JkJzpwYXMsDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ2NwbCc6J3RydWUnLA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdjcmVkZW50aWFsc190eXBlJzonZGV2aWNlX2Jhc2VkX2xvZ2luX3Bhc3N3b3JkJywNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAic291cmNlIjogImRldmljZV9iYXNlZF9sb2dpbiIsDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ2Vycm9yX2RldGFpbF90eXBlJzonYnV0dG9uX3dpdGhfZGlzYWJsZWQnLA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdzb3VyY2UnOidsb2dpbicsJ2Zvcm1hdCc6J2pzb24nLA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdnZW5lcmF0ZV9zZXNzaW9uX2Nvb2tpZXMnOicxJywNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnZ2VuZXJhdGVfYW5hbHl0aWNzX2NsYWltJzonMScsDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ2dlbmVyYXRlX21hY2hpbmVfaWQnOicxJywNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAibG9jYWxlIjoiZXNfQ1UiLCJjbGllbnRfY291bnRyeV9jb2RlIjoiQ1UiLA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdkZXZpY2UnOmd0dCwNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnZGV2aWNlX2lkJzphZGlkLA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICJtZXRob2QiOiAiYXV0aC5sb2dpbiIsDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgImZiX2FwaV9yZXFfZnJpZW5kbHlfbmFtZSI6ICJhdXRoZW50aWNhdGUiLA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICJmYl9hcGlfY2FsbGVyX2NsYXNzIjogImNvbS5mYWNlYm9vay5hY2NvdW50LmxvZ2luLnByb3RvY29sLkZiNGFBdXRoSGFuZGxlciJ9DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGhlYWQgPSB7DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ2NvbnRlbnQtdHlwZSc6J2FwcGxpY2F0aW9uL3gtd3d3LWZvcm0tdXJsZW5jb2RlZCcsDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ3gtZmItc2ltLWhuaSc6c3RyKHJhbmRvbS5yYW5kaW50KDJlNCw0ZTQpKSwNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAneC1mYi1jb25uZWN0aW9uLXR5cGUnOid1bmtub3duJywNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnQXV0aG9yaXphdGlvbic6J09BdXRoIDM1MDY4NTUzMTcyOHw2MmY4Y2U5Zjc0YjEyZjg0YzEyM2NjMjM0MzdhNGEzMicsDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ3VzZXItYWdlbnQnOnVhX3N0cmluZywNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAneC1mYi1uZXQtaG5pJzpzdHIocmFuZG9tLnJhbmRpbnQoMmU0LDRlNCkpLA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICd4LWZiLWNvbm5lY3Rpb24tYmFuZHdpZHRoJzpzdHIocmFuZG9tLnJhbmRpbnQoMmU3LDNlNykpLA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICd4LWZiLWNvbm5lY3Rpb24tcXVhbGl0eSc6J0VYQ0VMTEVOVCcsDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ3gtZmItZnJpZW5kbHktbmFtZSc6J2F1dGhlbnRpY2F0ZScsDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ2FjY2VwdC1lbmNvZGluZyc6J2d6aXAsIGRlZmxhdGUnLA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICd4LWZiLWh0dHAtZW5naW5lJzogICAgICdMaWdlcid9DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHVybCA9ICdodHRwczovL2ItZ3JhcGguZmFjZWJvb2suY29tL2F1dGgvbG9naW4/aW5jbHVkZV9oZWFkZXJzPWZhbHNlJmRlY29kZV9ib2R5X2pzb249ZmFsc2Umc3RyZWFtYWJsZV9qc29uX3Jlc3BvbnNlPXRydWUnDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBvID0gcmVxdWVzdHMucG9zdCh1cmwsZGF0YT1kYXRhLGhlYWRlcnM9aGVhZCxhbGxvd19yZWRpcmVjdHM9RmFsc2UpLnRleHQNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcSA9IGpzb24ubG9hZHMocG8pDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICdzZXNzaW9uX2tleScgaW4gcToNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwcmludChmJ1xyXHJcMDMzWzE7MzJtIFtERVhURVItTElWRV0gJytpZHMrJyB8ICcrcGFzKydcMDMzWzE7OTdtJykNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvcGVuKGYnL3NkY2FyZC9ERVhURVItTElWRS1NMTAudHh0JywnYScpLndyaXRlKGlkcysnfCcrcGFzKydcbicpO29wZW4oZicvc2RjYXJkL0RFWFRFUi1MSVZFLUNPT0tJRS1NMTAudHh0JywgJ2EnKS53cml0ZShpZHMrJ3wnK3BhcysnfCcra3VraSsnXG4nKQ0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICNjZWtfYXBrKHNlc3Npb24sY29raSkNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBva3MuYXBwZW5kKGlkcykNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaw0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbGlmICd3d3cuZmFjZWJvb2suY29tJyBpbiBxWydlcnJvciddWydtZXNzYWdlJ106DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgJ3knIGluIHBjcDoNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHByaW50KGYnXHJcclx4MWJbMTszMW0gW0RFWFRFUi1ERUFEXSAnK2lkcysnIHwgJytwYXMrJ1wwMzNbMTs5N20nKQ0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb3BlbihmJy9zZGNhcmQvREVYVEVSLURFQUQudHh0JywgJ2EnKS53cml0ZShpZHMrJ3wnK3BhcysnXG4nKQ0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY3BzLmFwcGVuZChpZHMpDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaw0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsc2U6DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvcGVuKGYnL3NkY2FyZC9ERVhURVItREVBRC50eHQnLCdhJykud3JpdGUoaWRzKyd8JytwYXMrJ1xuJykNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsc2U6DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29udGludWUNCiAgICAgICAgICAgICAgICAgICAgICAgIGxvb3ArPTENCiAgICAgICAgICAgICAgICBleGNlcHQgcmVxdWVzdHMuZXhjZXB0aW9ucy5Db25uZWN0aW9uRXJyb3I6DQogICAgICAgICAgICAgICAgICAgICAgICB0aW1lLnNsZWVwKDEwKQ0KICAgICAgICAgICAgICAgIGV4Y2VwdCBFeGNlcHRpb24gYXMgZToNCiAgICAgICAgICAgICAgICAgICAgICAgIHBhc3MNCmRlZiBNMTEoaWRzLG5hbWVzLHBhc3NsaXN0KToNCiAgICAgICAgZ2xvYmFsIGxvb3Asb2tzLGNwcw0KICAgICAgICBzeXMuc3Rkb3V0LndyaXRlKGYnXHJcclwwMzNbMTszN20gW0RFWFRFUi1NMTFdICVzfFwwMzNbMTszMm1PSzotJXMgXDAzM1sxOzM3bSclKGxvb3AsbGVuKG9rcykpKTtzeXMuc3Rkb3V0LmZsdXNoKCkNCiAgICAgICAgc2Vzc2lvbiA9IHJlcXVlc3RzLlNlc3Npb24oKQ0KICAgICAgICB0cnk6DQogICAgICAgICAgICAgICAgZmlyc3QgPSBuYW1lcy5zcGxpdChmJyAnKVswXQ0KICAgICAgICAgICAgICAgIHRyeToNCiAgICAgICAgICAgICAgICAgICAgICAgIGxhc3QgPSBuYW1lcy5zcGxpdChmJyAnKVsxXQ0KICAgICAgICAgICAgICAgIGV4Y2VwdDoNCiAgICAgICAgICAgICAgICAgICAgICAgIGxhc3QgPSAnQWhtZWQnDQogICAgICAgICAgICAgICAgcHMgPSBmaXJzdC5sb3dlcigpDQogICAgICAgICAgICAgICAgcHMyID0gbGFzdC5sb3dlcigpDQogICAgICAgICAgICAgICAgZm9yIGZpa3IgaW4gcGFzc2xpc3Q6DQogICAgICAgICAgICAgICAgICAgICAgICBwYXMgPSBmaWtyLnJlcGxhY2UoZidGaXJzdCcsZmlyc3QpLnJlcGxhY2UoZidMYXN0JyxsYXN0KS5yZXBsYWNlKGYnZmlyc3QnLHBzKS5yZXBsYWNlKGYnbGFzdCcscHMyKQ0KICAgICAgICAgICAgICAgICAgICAgICAgdWE9cmFuZG9tLmNob2ljZSh1Z2VuKQ0KICAgICAgICAgICAgICAgICAgICAgICAgaGVhZCA9IHsnSG9zdCc6ICdtb2JpbGUuZmFjZWJvb2suY29tJywgJ3ZpZXdwb3J0LXdpZHRoJzogJzk4MCcsICdzZWMtY2gtdWEnOiAnIiBOb3QgQTtCcmFuZCI7dj0iOTkiLCAiQ2hyb21pdW0iO3Y9IjEwMCIsICJHb29nbGUgQ2hyb21lIjt2PSIxMDAiJywgJ3NlYy1jaC11YS1tb2JpbGUnOiAnPzEnLCAnc2VjLWNoLXVhLXBsYXRmb3JtJzonIkFuZHJvaWQiJywgJ3NlYy1jaC1wcmVmZXJzLWNvbG9yLXNjaGVtZSc6ICdsaWdodCcsICdkbnQnOiAnMScsICd1cGdyYWRlLWluc2VjdXJlLXJlcXVlc3RzJzogJzEnLCAndXNlci1hZ2VudCc6IHVhLCAnYWNjZXB0JzogJ3RleHQvaHRtbCxhcHBsaWNhdGlvbi94aHRtbCt4bWwsYXBwbGljYXRpb24veG1sO3E9MC45LGltYWdlL0pBUkVEZixpbWFnZS93ZWJwLGltYWdlL2FwbmcsKltpbnNlcnRlZCBieSBjeXRob24gdG8gYXZvaWQgY29tbWVudCBjbG9zZXJdL1tpbnNlcnRlZCBieSBjeXRob24gdG8gYXZvaWQgY29tbWVudCBzdGFydF0qO3E9MC44LGFwcGxpY2F0aW9uL3NpZ25lZC1leGNoYW5nZTt2PWIzO3E9MC45JywgJ3NlYy1mZXRjaC1zaXRlJzogJ25vbmUnLCAnc2VjLWZldGNoLW1vZGUnOiAnbkpBUkVEZ2F0ZScsICdzZWMtZmV0Y2gtdXNlcic6ICc/MScsICdzZWMtZmV0Y2gtZGVzdCc6ICdkb2N1bWVudCcsICdhY2NlcHQtZW5jb2RpbmcnOiAnZ3ppcCwgZGVmbGF0ZSwgYnInLCAnYWNjZXB0LWxhbmd1YWdlJzogJ2VuLVVTLGVuO3E9MC45J30NCiAgICAgICAgICAgICAgICAgICAgICAgIGdldGxvZyA9IHNlc3Npb24uZ2V0KGYnaHR0cHM6Ly9tb2JpbGUuZmFjZWJvb2suY29tL2xvZ2luL2RldmljZS1iYXNlZC9wYXNzd29yZC8/dWlkPXtpZHN9JmZsb3c9bG9naW5fbm9fcGluJnJlZnNyYz1kZXByZWNhdGVkJl9yZHInKQ0KICAgICAgICAgICAgICAgICAgICAgICAgaWRwYXNzID17ImxzZCI6cmUuc2VhcmNoKGYnbmFtZT0ibHNkIiB2YWx1ZT0iKC4qPykiJywgc3RyKGdldGxvZy50ZXh0KSkuZ3JvdXAoMSksImphem9lc3QiOnJlLnNlYXJjaChmJ25hbWU9Imphem9lc3QiIHZhbHVlPSIoLio/KSInLCBzdHIoZ2V0bG9nLnRleHQpKS5ncm91cCgxKSwidWlkIjppZHMsIm5leHQiOiJodHRwczovL21iYXNpYy5mYWNlYm9vay5jb20vbG9naW4vc2F2ZS1kZXZpY2UvIiwiZmxvdyI6ImxvZ2luX25vX3BpbiIsInBhc3MiOnBhcyx9DQogICAgICAgICAgICAgICAgICAgICAgICBjb21wbGV0ZSA9IHNlc3Npb24ucG9zdChmJ2h0dHBzOi8vbW9iaWxlLmZhY2Vib29rLmNvbS9sb2dpbi9kZXZpY2UtYmFzZWQvdmFsaWRhdGUtcGFzc3dvcmQvP3NoYmw9MCcsZGF0YT1pZHBhc3MsYWxsb3dfcmVkaXJlY3RzPUZhbHNlLGhlYWRlcnM9aGVhZCkNCiAgICAgICAgICAgICAgICAgICAgICAgIFNoYWhpbj1zZXNzaW9uLmNvb2tpZXMuZ2V0X2RpY3QoKS5rZXlzKCkNCiAgICAgICAgICAgICAgICAgICAgICAgIGlmICJjX3VzZXIiIGluIFNoYWhpbjoNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29raT1zZXNzaW9uLmNvb2tpZXMuZ2V0X2RpY3QoKQ0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBrdWtpID0gKGYiOyIpLmpvaW4oWyAiJXM9JXMiICUgKGtleSwgdmFsdWUpIGZvciBrZXksIHZhbHVlIGluIHNlc3Npb24uY29va2llcy5nZXRfZGljdCgpLml0ZW1zKCkgXSkNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcHJpbnQoZidcclxyXDAzM1sxOzMybSBbREVYVEVSLUxJVkVdICVzIHwgJXMnJShpZHMscGFzKSkNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcHJpbnQoIlwwMzNbMTs5Nm0gW0NPT0tJRS3wn42qXSA6XDAzM1sxOzM3bSAiK2t1a2kpICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb3BlbihmJy9zZGNhcmQvREVYVEVSLUxJVkUtTTExLnR4dCcsICdhJykud3JpdGUoaWRzKyd8JytwYXMrJ1xuJyk7b3BlbihmJy9zZGNhcmQvREVYVEVSLUxJVkUtQ09PS0lFLU0xMS50eHQnLCAnYScpLndyaXRlKGlkcysnfCcrcGFzKyd8JytrdWtpKydcbicpDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICNjZWtfYXBrKHNlc3Npb24sY29raSkNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb2tzLmFwcGVuZChpZHMpDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrDQogICAgICAgICAgICAgICAgICAgICAgICBlbGlmICdjaGVja3BvaW50JyBpbiBTaGFoaW46DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICd5JyBpbiBwY3A6DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcHJpbnQoZidcclxyXHgxYlsxOzMxbSBbREVYVEVSLURFQURdICcraWRzKycgfCAnK3BhcysnXDAzM1sxOzk3bScpDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb3BlbihmJy9zZGNhcmQvREVYVEVSLURFQUQudHh0JywgJ2EnKS53cml0ZShpZHMrJ3wnK3BhcysnXG4nKQ0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNwcy5hcHBlbmQoaWRzKQ0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsc2U6DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWsNCiAgICAgICAgICAgICAgICAgICAgICAgIGVsc2U6DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlDQogICAgICAgIGV4Y2VwdCByZXF1ZXN0cy5leGNlcHRpb25zLkNvbm5lY3Rpb25FcnJvcjoNCiAgICAgICAgICAgICAgICB0aW1lLnNsZWVwKDIwKQ0KICAgICAgICBsb29wKz0xDQp4eHh4eD0oZiJHVC0xMDE1IiwiR1QtMTAyMCIsIkdULTEwMzAiLCJHVC0xMDM1IiwiR1QtMTA0MCIsIkdULTEwNDUiLCJHVC0xMDUwIiwiR1QtMTI0MCIsIkdULTE0NDAiLCJHVC0xNDUwIiwiR1QtMTgxOTAiLCJHVC0xODI2MiIsIkdULTE5MDYwSSIsIkdULTE5MDgyIiwiR1QtMTkwODMiLCJHVC0xOTEwNSIsIkdULTE5MTUyIiwiR1QtMTkxOTIiLCJHVC0xOTMwMCIsIkdULTE5NTA1IiwiR1QtMjAwMCIsIkdULTIwMDAwIiwiR1QtMjAwcyIsIkdULTMwMDAiLCJHVC00MTRYT1AiLCJHVC02OTE4IiwiR1QtNzAxMCIsIkdULTcwMjAiLCJHVC03MDMwIiwiR1QtNzA0MCIsIkdULTcwNTAiLCJHVC03MTAwIiwiR1QtNzEwNSIsIkdULTcxMTAiLCJHVC03MjA1IiwiR1QtNzIxMCIsIkdULTcyNDBSIiwiR1QtNzI0NSIsIkdULTczMDMiLCJHVC03MzEwIiwiR1QtNzMyMCIsIkdULTczMjUiLCJHVC03MzI2IiwiR1QtNzM0MCIsIkdULTc0MDUiLCJHVC03NTUwIDVHVC04MDA1IiwiR1QtODAxMCIsIkdULTgxIiwiR1QtODEwIiwiR1QtODEwNSIsIkdULTgxMTAiLCJHVC04MjIwUyIsIkdULTg0MTAiLCJHVC05MzAwIiwiR1QtOTMyMCIsIkdULTkzRyIsIkdULUE3MTAwIiwiR1QtQTk1MDAiLCJHVC1BTkRST0lEIiwiR1QtQjI3MTAiLCJHVC1CNTMzMCIsIkdULUI1MzMwQiIsIkdULUI1MzMwTCIsIkdULUI1MzMwWktBSU5VIiwiR1QtQjU1MTAiLCJHVC1CNTUxMiIsIkdULUI1NzIyIiwiR1QtQjc1MTAiLCJHVC1CNzcyMiIsIkdULUI3ODEwIiwiR1QtQjkxNTAiLCJHVC1COTM4OCIsIkdULUMzMDEwIiwiR1QtQzMyNjIiLCJHVC1DMzMxMFIiLCJHVC1DMzMxMiIsIkdULUMzMzEyUiIsIkdULUMzMzEzVCIsIkdULUMzMzIyIiwiR1QtQzMzMjJpIiwiR1QtQzM1MjAiLCJHVC1DMzUyMEkiLCJHVC1DMzU5MiIsIkdULUMzNTk1IiwiR1QtQzM3ODIiLCJHVC1DNjcxMiIsIkdULUUxMjgyVCIsIkdULUUxNTAwIiwiR1QtRTIyMDAiLCJHVC1FMjIwMiIsIkdULUUyMjUwIiwiR1QtRTIyNTIiLCJHVC1FMjYwMCIsIkdULUUyNjUyVyIsIkdULUUzMjEwIiwiR1QtRTMzMDkiLCJHVC1FMzMwOUkiLCJHVC1FMzMwOVQiLCJHVC1HNTMwSCIsIkdULUc5MzBGIiwiR1QtSDk1MDAiLCJHVC1JNTUwOCIsIkdULUk1ODAxIiwiR1QtSTY0MTAiLCJHVC1JODE1MCIsIkdULUk4MTYwT0tMVFBBIiwiR1QtSTgxNjBaV0xUVFQiLCJHVC1JODI1OCIsIkdULUk4MjYyRCIsIkdULUk4MjY4IiJHVC1JODUwNSIsIkdULUk4NTMwQkFBQlRVIiwiR1QtSTg1MzBCQUxDSE8iLCJHVC1JODUzMEJBTFRUVCIsIkdULUk4NTUwRSIsIkdULUk4NzUwIiwiR1QtSTkwMCIsIkdULUk5MDA4TCIsIkdULUk5MDgwRSIsIkdULUk5MDgyQyIsIkdULUk5MDgyRVdBSU5VIiwiR1QtSTkwODJpIiwiR1QtSTkxMDBHIiwiR1QtSTkxMDBMS0xDSFQiLCJHVC1JOTEwME0iLCJHVC1JOTEwMFAiLCJHVC1JOTEwMFQiLCJHVC1JOTEwNVVBTkRCVCIsIkdULUk5MTI4RSIsIkdULUk5MTI4SSIsIkdULUk5MTI4ViIsIkdULUk5MTU4UCIsIkdULUk5MTU4ViIsIkdULUk5MTY4SSIsIkdULUk5MTkwIiwiR1QtSTkxOTIiLCJHVC1JOTE5MkkiLCJHVC1JOTE5NUgiLCJHVC1JOTE5NUwiLCJHVC1JOTI1MCIsIkdULUk5MzAwIiwiR1QtSTkzMDBJIiwiR1QtSTkzMDFJIiwiR1QtSTkzMDNJIiwiR1QtSTkzMDVOIiwiR1QtSTkzMDhJIiwiR1QtSTk1MDAiLCJHVC1JOTUwNUciLCJHVC1JOTUwNVgiLCJHVC1JOTUwN1YiLCJHVC1JOTYwMCIsIkdULU01NjUwIiwiR1QtTjUwMDBTIiwiR1QtTjUxMDAiLCJHVC1ONTEwNSIsIkdULU41MTEwIiwiR1QtTjUxMjAiLCJHVC1ONzAwMEIiLCJHVC1ONzAwNSIsIkdULU43MTAwIiwiR1QtTjcxMDBUIiwiR1QtTjcxMDIiLCJHVC1ONzEwNSIsIkdULU43MTA1VCIsIkdULU43MTA4IiwiR1QtTjcxMDhEIiwiR1QtTjgwMDAiLCJHVC1OODAwNSIsIkdULU44MDEwIiwiR1QtTjgwMjAiLCJHVC1OOTAwMCIsIkdULU45NTA1IiwiR1QtUDEwMDBDV0FYU0EiLCJHVC1QMTAwME0iLCJHVC1QMTAwMFQiLCJHVC1QMTAxMCIsIkdULVAzMTAwQiIsIkdULVAzMTA1IiwiR1QtUDMxMDgiLCJHVC1QMzExMCIsIkdULVA1MTAwIiwiR1QtUDUxMTAiLCJHVC1QNTIwMCIsIkdULVA1MjEwIiwiR1QtUDUyMTBYRDEiLCJHVC1QNTIyMCIsIkdULVA2MjAwIiwiR1QtUDYyMDBMIiwiR1QtUDYyMDEiLCJHVC1QNjIxMCIsIkdULVA2MjExIiwiR1QtUDY4MDAiLCJHVC1QNzEwMCIsIkdULVA3MzAwIiwiR1QtUDczMDBCIiwiR1QtUDczMTAiLCJHVC1QNzMyMCIsIkdULVA3NTAwRCIsIkdULVA3NTAwTSIsIlNBTVNVTkciLCJMTVk0IiwiTE1ZNDdWIiwiTU1CMjlLIiwiTU1CMjlNIiwiTFJYMjJDIiwiTFJYMjJHIiwiTk1GMiIsIk5NRjI2WCIsIk5NRjI2WDsiLCJOUkQ5ME0iLCJOUkQ5ME07IiwiU1BILUw3MjAiLCJJTUw3NEsiLCJJTU03NkQiLCJKRFEzOSIsIkpTUzE1SiIsIkpaTzU0SyIsIktPVDQiLCJLT1Q0OUgiLCJLT1Q0U00tVDMxMCIsIktUVTg0UCIsIlNNLUE1MDBGIiwiU00tQTUwMEZVIiwiU00tQTUwMEgiLCJTTS1HNTMyRiIsIlNNLUc5MDBGIiwiU00tRzkyMEYiLCJTTS1HOTMwRiIsIlNNLUc5MzUiLCJTTS1HOTUwRiIsIlNNLUozMjBGIiwiU00tSjMyMEZOIiwiU00tSjMyMEgiLCJTTS1KMzIwTSIsIlNNLUo1MTBGTiIsIlNNLUo3MDFGIiwiU00tTjkyMFMiLCJTTS1UMTExIiwiU00tVDIzMCIsIlNNLVQyMzEiLCJTTS1UMjM1IiwiU00tVDI4MCIsIlNNLVQzMTEiLCJTTS1UMzE1IiwiU00tVDUyNSIsIlNNLVQ1MzEiLCJTTS1UNTM1IiwiU00tVDU1NSIsIlNNLVQ1NjEiLCJTTS1UNzA1IiwiU00tVDgwNSIsIlNNLVQ4MjAiKQ0KIw0KZGVmIGJkKCk6DQogICAgICAgICAgICAgICAgdXNlcj1bXQ0KICAgICAgICAgICAgICAgIHBjcD1bXQ0KICAgICAgICAgICAgICAgIGNsZWFyKCkNCiAgICAgICAgICAgICAgICBwY3AuYXBwZW5kKGYneScpDQogICAgICAgICAgICAgICAgcHJpbnQoJ1wwMzNbMTszMm0gWytdIEV4YW1wbGU6IDAxNywgMDE4LCAwMTksIDAxMywgMDE2JykNCiAgICAgICAgICAgICAgICBsaW5leCgpDQogICAgICAgICAgICAgICAgY29kZSA9IGlucHV0KCdcMDMzWzE7MzdtIFs/XSBQdXQgY29kZTogJykNCiAgICAgICAgICAgICAgICB0cnk6DQogICAgICAgICAgICAgICAgICAgICAgICBsaW1pdCA9IGludChpbnB1dCgnXG5cMDMzWzE7MzJtIFsrXSBFeGFtcGxlOiAzMDAwLCA1MDAwLCAxMDAwMCwgNTAwMDBcblwwMzNbMTszN20gWz9dIFB1dCBsaW1pdDogJykpDQogICAgICAgICAgICAgICAgZXhjZXB0IFZhbHVlRXJyb3I6DQogICAgICAgICAgICAgICAgICAgICAgICBsaW1pdCA9IDUwMDANCiAgICAgICAgICAgICAgICBmb3Igbm1iciBpbiByYW5nZShsaW1pdCk6DQogICAgICAgICAgICAgICAgICAgICAgICBubXAgPSAnJy5qb2luKHJhbmRvbS5jaG9pY2Uoc3RyaW5nLmRpZ2l0cykgZm9yIF8gaW4gcmFuZ2UoOCkpDQogICAgICAgICAgICAgICAgICAgICAgICB1c2VyLmFwcGVuZChubXApDQogICAgICAgICAgICAgICAgd2l0aCB0cmVkKG1heF93b3JrZXJzPTMwKSBhcyBzYXQ6ICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgIGNsZWFyKCkNCiAgICAgICAgICAgICAgICAgICAgICAgIHRsID0gc3RyKGxlbih1c2VyKSkNCiAgICAgICAgICAgICAgICAgICAgICAgIHByaW50KGYnXDAzM1sxOzM3bSBbK10gVG90YWwgYWNjb3VudCA6IFwwMzNbMTszMm0nK3RsKQ0KICAgICAgICAgICAgICAgICAgICAgICAgcHJpbnQoZidcMDMzWzE7MzdtIFsrXSBDaG9pY2UgY29kZSA6XDAzM1sxOzMybSAnK2NvZGUpDQogICAgICAgICAgICAgICAgICAgICAgICBwcmludChmJ1wwMzNbMTszN20gWytdIFByb3Nlc3MgaGFzIHN0YXJ0ZWRcMDMzWzE7OTdtJykNCiAgICAgICAgICAgICAgICAgICAgICAgIGxpbmV4KCkNCiAgICAgICAgICAgICAgICAgICAgICAgIGZvciBwc3ggaW4gdXNlcjoNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWRzID0gY29kZStwc3gNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcGFzc2xpc3QgPSBbcHN4LGlkcywnYmFuZ2xhZGVzaCcsJ0JhbmdsYWRlc2gnLCdpIGxvdmUgeW91JywnaWxvdmV5b3UnLCdmcmVlIGZpcmUnLCdGcmVlIEZpcmUnXQ0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzYXQuc3VibWl0KGFwaXgsaWRzLHBhc3NsaXN0KQ0KICAgICAgICAgICAgICAgIHByaW50KCdcMDMzWzE7MzdtJykNCiAgICAgICAgICAgICAgICBsaW5leCgpDQogICAgICAgICAgICAgICAgcHJpbnQoJyBUaGUgcHJvY2VzcyBoYXMgY29tcGxldGVkJykNCiAgICAgICAgICAgICAgICBwcmludCgnIFRvdGFsIE9LL0NQOiAnK3N0cihsZW4ob2tzKSkrJy8nK3N0cihsZW4oY3BzKSkpDQoNCmRlZiBnbWwoKToNCiAgICAgICAgICAgICAgICB1c2VyPVtdDQogICAgICAgICAgICAgICAgcGNwPVtdDQogICAgICAgICAgICAgICAgY2xlYXIoKQ0KICAgICAgICAgICAgICAgIHBjcC5hcHBlbmQoZid5JykNCiAgICAgICAgICAgICAgICBwcmludCgnXDAzM1sxOzMybSBOYW1lICBleGFtcGxlOiAgU2hhaGluLCBTYWJiaXIsIEZvcmhhZCAnKQ0KICAgICAgICAgICAgICAgIGNvZGUgPSBpbnB1dCgnIEZpcnN0IG5hbWUgOiAnKQ0KICAgICAgICAgICAgICAgIHByaW50KCcgTmFtZSBFeGFtcGxlIDogQWxhbSwgaG9zc2VuLCBob3NzYWluJykNCiAgICAgICAgICAgICAgICBjb2RleCA9IGlucHV0KCcgTGFzdCBuYW1lIDogJykNCiAgICAgICAgICAgICAgICB0cnk6DQogICAgICAgICAgICAgICAgICAgICAgICBsaW1pdCA9IGludChpbnB1dCgnXDAzM1sxOzMybSBleGFtcGxlOiAyMDAwLCAzMDAwLCA1MDAwLCAxMDAwMFxuXDAzM1sxOzM3bSBwdXQgbGltaXQ6ICcpKQ0KICAgICAgICAgICAgICAgIGV4Y2VwdCBWYWx1ZUVycm9yOg0KICAgICAgICAgICAgICAgICAgICAgICAgbGltaXQgPSA1MDAwDQogICAgICAgICAgICAgICAgZm9yIG5tYnIgaW4gcmFuZ2UobGltaXQpOg0KICAgICAgICAgICAgICAgICAgICAgICAgbm1wID0gJycuam9pbihyYW5kb20uY2hvaWNlKHN0cmluZy5kaWdpdHMpIGZvciBfIGluIHJhbmdlKDIsNSkpDQogICAgICAgICAgICAgICAgICAgICAgICB1c2VyLmFwcGVuZChubXApDQogICAgICAgICAgICAgICAgd2l0aCB0cmVkKG1heF93b3JrZXJzPTMwKSBhcyBzYXQ6ICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgIGNsZWFyKCkNCiAgICAgICAgICAgICAgICAgICAgICAgIHRsID0gc3RyKGxlbih1c2VyKSkNCiAgICAgICAgICAgICAgICAgICAgICAgIHByaW50KCcgVG90YWwgYWNjb3VudCA6IFwwMzNbMTszMm0nK3RsKQ0KICAgICAgICAgICAgICAgICAgICAgICAgcHJpbnQoZidcMDMzWzE7MzdtIENob2ljZSBjb2RlIC4uOlwwMzNbMTszMm0gJytjb2RlKQ0KICAgICAgICAgICAgICAgICAgICAgICAgcHJpbnQoZidcMDMzWzE7MzJtIFJhbmRvbSBUZXN0aW5nIFZlcnNpb24gLi4uLi4gJykNCiAgICAgICAgICAgICAgICAgICAgICAgIHByaW50KGYnXDAzM1sxOzM3bSBceDFiWzM4OzU7MTI2bSBQcm9zZXNzIHN0YXJ0ZWRcMDMzWzE7OTdtJykNCiAgICAgICAgICAgICAgICAgICAgICAgIGxpbmV4KCkNCiAgICAgICAgICAgICAgICAgICAgICAgIGZvciBwc3ggaW4gdXNlcjoNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWRzID0gY29kZStjb2RleCtwc3gNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcGFzc2xpc3QgPSBbY29kZSxjb2RleCxjb2RlK2NvZGV4LGNvZGUrJyAnK2NvZGV4LGNvZGUrJzEyMycsY29kZSsnMTIzNCcsY29kZSsnMTIzNDUnLCdAI0AjQCMnLCcxMjM4OTAnXQ0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzYXQuc3VibWl0KGFwaXgsaWRzLHBhc3NsaXN0KQ0KICAgICAgICAgICAgICAgIHByaW50KCdcMDMzWzE7MzdtJykNCiAgICAgICAgICAgICAgICBsaW5leCgpDQogICAgICAgICAgICAgICAgcHJpbnQoJyBUaGUgcHJvY2VzcyBoYXMgY29tcGxldGVkJykNCiAgICAgICAgICAgICAgICBwcmludCgnIFRvdGFsIE9LL0NQOiAnK3N0cihsZW4ob2tzKSkrJy8nK3N0cihsZW4oY3BzKSkpDQoNCg0KDQoNCg0KZGVmIHJjcmFja19mcmVlKGlkZixwd3YpOg0KCSNwcmludCh1c2VyKQ0KCWdsb2JhbCBsb29wDQoJZ2xvYmFsIGNwcw0KCWdsb2JhbCBva3MNCglnbG9iYWwgYWdlbnRzDQoJdHJ5Og0KCQlmb3IgcHMgaW4gcHd2Og0KCSMJCXByaW50KGlkZisnfCcrcHMpDQoJCQkjc2Vzc2lvbiA9IHJlcXVlc3RzLlNlc3Npb24oKQ0KCQkJc3lzLnN0ZG91dC53cml0ZShmJ1xyXHJcMDMzWzE7MzdtIFtERVhURVJdICVzfFwwMzNbMTszMm1PSzotJXMgXDAzM1sxOzM3bSclKGxvb3AsbGVuKG9rcykpKTtzeXMuc3Rkb3V0LmZsdXNoKCkNCgkJCXNlc3Npb24gPSByZXF1ZXN0cy5TZXNzaW9uKCkNCgkJCXBybyA9IHJhbmRvbS5jaG9pY2UodXNlcmFnZW50KQ0KCQkJZnJlZV9mYiA9IHNlc3Npb24uZ2V0KCdodHRwczovL20uYWxwaGEuZmFjZWJvb2suY29tJykudGV4dA0KCQkJbG9nX2RhdGEgPSB7DQoJCQkJImxzZCI6cmUuc2VhcmNoKCduYW1lPSJsc2QiIHZhbHVlPSIoLio/KSInLCBzdHIoZnJlZV9mYikpLmdyb3VwKDEpLA0KCQkJImphem9lc3QiOnJlLnNlYXJjaCgnbmFtZT0iamF6b2VzdCIgdmFsdWU9IiguKj8pIicsIHN0cihmcmVlX2ZiKSkuZ3JvdXAoMSksDQoJCQkibV90cyI6cmUuc2VhcmNoKCduYW1lPSJtX3RzIiB2YWx1ZT0iKC4qPykiJywgc3RyKGZyZWVfZmIpKS5ncm91cCgxKSwNCgkJCSJsaSI6cmUuc2VhcmNoKCduYW1lPSJsaSIgdmFsdWU9IiguKj8pIicsIHN0cihmcmVlX2ZiKSkuZ3JvdXAoMSksDQoJCQkidHJ5X251bWJlciI6IjAiLA0KCQkJInVucmVjb2duaXplZF90cmllcyI6IjAiLA0KCQkJImVtYWlsIjppZGYsDQoJCQkicGFzcyI6cHMsDQoJCQkibG9naW4iOiJMb2cgSW4ifQ0KCQkJaGVhZGVyX2ZyZWVmYiA9IHsnYXV0aG9yaXR5JzonbS5hbHBoYS5mYWNlYm9vay5jb20nLA0KCQkJJ21ldGhvZCc6ICdQT1NUJywNCgkJCSdzY2hlbWUnOiAnaHR0cHMnLA0KCQkJJ2FjY2VwdCc6ICd0ZXh0L2h0bWwsYXBwbGljYXRpb24veGh0bWwreG1sLGFwcGxpY2F0aW9uL3htbDtxPTAuOSxpbWFnZS9KQVJFRGYsaW1hZ2Uvd2VicCxpbWFnZS9hcG5nLCovKjtxPTAuOCxhcHBsaWNhdGlvbi9zaWduZWQtZXhjaGFuZ2U7dj1iMztxPTAuOScsDQoJCQknYWNjZXB0LWVuY29kaW5nJzondXRmLTgnLCdhY2NlcHQtbGFuZ3VhZ2UnOiAnZW4tVVMsZW47cT0wLjknLA0KCQkJJ2NhY2hlLWNvbnRyb2wnOiAnbWF4LWFnZT0wJywNCgkJCSdzZWMtY2gtdWEnOiAnIkdvb2dsZSBDaHJvbWUiO3Y9IjEwMCIsICJOb3QpQTtCcmFuZCI7dj0iOTkiLCAiQ2hyb21pdW0iO3Y9IjEwMCInLA0KCQkJJ3NlYy1jaC11YS1tb2JpbGUnOiAnPzEnLCdzZWMtY2gtdWEtcGxhdGZvcm0nOiAnIkFuZHJvaWQiJywNCgkJCSdzZWMtZmV0Y2gtZGVzdCc6ICdkb2N1bWVudCcsDQoJCQknc2VjLWZldGNoLW1vZGUnOiAnbU1BUktnYXRlJywNCgkJCSdzZWMtZmV0Y2gtc2l0ZSc6ICdub25lJywNCgkJCSdzZWMtZmV0Y2gtdXNlcic6ICc/MScsDQoJCQkndXBncmFkZS1pbnNlY3VyZS1yZXF1ZXN0cyc6ICcxJywNCgkJCSd1c2VyLWFnZW50JzogcHJvfQ0KCQkJbG8gPSBzZXNzaW9uLnBvc3QoJ2h0dHBzOi8vbS5hbHBoYS5mYWNlYm9vay5jb20vbG9naW4vZGV2aWNlLWJhc2VkL3JlZ3VsYXIvbG9naW4vP3JlZnNyYz1kZXByZWNhdGVkJmFtcDtsd3Y9MTAwJmFtcDtyZWZpZD04JyxkYXRhPWxvZ19kYXRhLGhlYWRlcnM9aGVhZGVyX2ZyZWVmYikudGV4dA0KCQkJbG9nX2Nvb2tpZXM9c2Vzc2lvbi5jb29raWVzLmdldF9kaWN0KCkua2V5cygpDQoJCQkjcHJpbnQoaWlkKyd8Jytwd3MrJ3wnK3N0cihsb2dfY29va2llcykpDQoJCQlpZiAnY191c2VyJyBpbiBsb2dfY29va2llczoNCgkJCQljb2tpPSI7Ii5qb2luKFtrZXkrIj0iK3ZhbHVlIGZvciBrZXksdmFsdWUgaW4gc2Vzc2lvbi5jb29raWVzLmdldF9kaWN0KCkuaXRlbXMoKV0pDQoJCQkJY2lkID0gY29raVsxNTE6MTY2XQ0KCQkJCXByaW50KCdcbicpDQoJCQkJcHJpbnQoJ1wwMzNbMTs5Mm1bREVYVEVSLUxJVkVdICcraWRmKycgfCAnK3BzKydcMDMzWzA7OTdtJykNCgkJCQljZWtfYXBrKGNva2kpDQoJCQkJb3Blbignb2sudHh0JywgJ2EnKS53cml0ZShpZGYrJyB8ICcrcHMrJ1xuJykNCgkJCQlva3MuYXBwZW5kKGlkZikNCgkJCQlicmVhaw0KCQkJZWxpZiAnY2hlY2twb2ludCcgaW4gbG9nX2Nvb2tpZXM6DQoJCQkJY29raT0iOyIuam9pbihba2V5KyI9Iit2YWx1ZSBmb3Iga2V5LHZhbHVlIGluIHNlc3Npb24uY29va2llcy5nZXRfZGljdCgpLml0ZW1zKCldKQ0KCQkJCWNpZCA9IGNva2lbMTQxOjE1Nl0NCgkJCQlwcmludCgnXG4nKQ0KCQkJCXByaW50KCdcMDMzWzE7OTFtW0RFWFRFUi1ERUFEXSAnK2lkZisnIHwgJytwcysnXDAzM1swOzk3bScpDQoJCQkJb3BlbignY3AudHh0JywgJ2EnKS53cml0ZShpZGYrJyB8ICcrcHMrJ1xuJykNCgkJCQljcHMuYXBwZW5kKGlkZikNCgkJCQlicmVhaw0KCQkJZWxzZToNCgkJCQljb250aW51ZQ0KCQlsb29wKz0xDQoJCWJvID0gcmFuZG9tLmNob2ljZShbbSxrLGgsYix1LHhdKQ0KCQlzeXMuc3Rkb3V0LndyaXRlKGYnXHJcclwwMzNbMTszN20gW0RFWFRFUl0gJXN8XDAzM1sxOzMybU9LOi0lcyBcMDMzWzE7MzdtJyUobG9vcCxsZW4ob2tzKSkpO3N5cy5zdGRvdXQuZmx1c2goKQ0KCQlzeXMuc3Rkb3V0LmZsdXNoKCkNCgkNCglleGNlcHQ6DQoJCXBhc3MNCmRlZiBhcGl4KGlkcyxwYXNzbGlzdCk6DQogICAgICAgICAgICAgICAgdHJ5Og0KICAgICAgICAgICAgICAgICAgICAgICAgZ2xvYmFsIG9rLGxvb3ANCiAgICAgICAgICAgICAgICAgICAgICAgIHN5cy5zdGRvdXQud3JpdGUoZidcclxyXDAzM1sxOzM3bSBbREVYVEVSXSAlc3xcMDMzWzE7MzJtT0s6LSVzIFwwMzNbMTszN20nJShsb29wLGxlbihva3MpKSk7c3lzLnN0ZG91dC5mbHVzaCgpDQogICAgICAgICAgICAgICAgICAgICAgICBmb3IgcGFzIGluIHBhc3NsaXN0Og0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhcHBsaWNhdGlvbl92ZXJzaW9uID0gc3RyKHJhbmRvbS5yYW5kaW50KDExMSw1NTUpKSsnLjAuMC4nK3N0cihyYW5kb20ucmFuZHJhbmdlKDksNDkpKStzdHIocmFuZG9tLnJhbmRpbnQoMTExLDU1NSkpDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFwcGxpY2F0aW9uX3ZlcnNpb25fY29kZT1zdHIocmFuZG9tLnJhbmRpbnQoMDAwMDAwMDAwLDk5OTk5OTk5OSkpDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZicz1yYW5kb20uY2hvaWNlKGZia3MpDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHh4eHh4PShmIkdULTEwMTUiLCJHVC0xMDIwIiwiR1QtMTAzMCIsIkdULTEwMzUiLCJHVC0xMDQwIiwiR1QtMTA0NSIsIkdULTEwNTAiLCJHVC0xMjQwIiwiR1QtMTQ0MCIsIkdULTE0NTAiLCJHVC0xODE5MCIsIkdULTE4MjYyIiwiR1QtMTkwNjBJIiwiR1QtMTkwODIiLCJHVC0xOTA4MyIsIkdULTE5MTA1IiwiR1QtMTkxNTIiLCJHVC0xOTE5MiIsIkdULTE5MzAwIiwiR1QtMTk1MDUiLCJHVC0yMDAwIiwiR1QtMjAwMDAiLCJHVC0yMDBzIiwiR1QtMzAwMCIsIkdULTQxNFhPUCIsIkdULTY5MTgiLCJHVC03MDEwIiwiR1QtNzAyMCIsIkdULTcwMzAiLCJHVC03MDQwIiwiR1QtNzA1MCIsIkdULTcxMDAiLCJHVC03MTA1IiwiR1QtNzExMCIsIkdULTcyMDUiLCJHVC03MjEwIiwiR1QtNzI0MFIiLCJHVC03MjQ1IiwiR1QtNzMwMyIsIkdULTczMTAiLCJHVC03MzIwIiwiR1QtNzMyNSIsIkdULTczMjYiLCJHVC03MzQwIiwiR1QtNzQwNSIsIkdULTc1NTAgNUdULTgwMDUiLCJHVC04MDEwIiwiR1QtODEiLCJHVC04MTAiLCJHVC04MTA1IiwiR1QtODExMCIsIkdULTgyMjBTIiwiR1QtODQxMCIsIkdULTkzMDAiLCJHVC05MzIwIiwiR1QtOTNHIiwiR1QtQTcxMDAiLCJHVC1BOTUwMCIsIkdULUFORFJPSUQiLCJHVC1CMjcxMCIsIkdULUI1MzMwIiwiR1QtQjUzMzBCIiwiR1QtQjUzMzBMIiwiR1QtQjUzMzBaS0FJTlUiLCJHVC1CNTUxMCIsIkdULUI1NTEyIiwiR1QtQjU3MjIiLCJHVC1CNzUxMCIsIkdULUI3NzIyIiwiR1QtQjc4MTAiLCJHVC1COTE1MCIsIkdULUI5Mzg4IiwiR1QtQzMwMTAiLCJHVC1DMzI2MiIsIkdULUMzMzEwUiIsIkdULUMzMzEyIiwiR1QtQzMzMTJSIiwiR1QtQzMzMTNUIiwiR1QtQzMzMjIiLCJHVC1DMzMyMmkiLCJHVC1DMzUyMCIsIkdULUMzNTIwSSIsIkdULUMzNTkyIiwiR1QtQzM1OTUiLCJHVC1DMzc4MiIsIkdULUM2NzEyIiwiR1QtRTEyODJUIiwiR1QtRTE1MDAiLCJHVC1FMjIwMCIsIkdULUUyMjAyIiwiR1QtRTIyNTAiLCJHVC1FMjI1MiIsIkdULUUyNjAwIiwiR1QtRTI2NTJXIiwiR1QtRTMyMTAiLCJHVC1FMzMwOSIsIkdULUUzMzA5SSIsIkdULUUzMzA5VCIsIkdULUc1MzBIIiwiR1QtRzkzMEYiLCJHVC1IOTUwMCIsIkdULUk1NTA4IiwiR1QtSTU4MDEiLCJHVC1JNjQxMCIsIkdULUk4MTUwIiwiR1QtSTgxNjBPS0xUUEEiLCJHVC1JODE2MFpXTFRUVCIsIkdULUk4MjU4IiwiR1QtSTgyNjJEIiwiR1QtSTgyNjgiIkdULUk4NTA1IiwiR1QtSTg1MzBCQUFCVFUiLCJHVC1JODUzMEJBTENITyIsIkdULUk4NTMwQkFMVFRUIiwiR1QtSTg1NTBFIiwiR1QtSTg3NTAiLCJHVC1JOTAwIiwiR1QtSTkwMDhMIiwiR1QtSTkwODBFIiwiR1QtSTkwODJDIiwiR1QtSTkwODJFV0FJTlUiLCJHVC1JOTA4MmkiLCJHVC1JOTEwMEciLCJHVC1JOTEwMExLTENIVCIsIkdULUk5MTAwTSIsIkdULUk5MTAwUCIsIkdULUk5MTAwVCIsIkdULUk5MTA1VUFOREJUIiwiR1QtSTkxMjhFIiwiR1QtSTkxMjhJIiwiR1QtSTkxMjhWIiwiR1QtSTkxNThQIiwiR1QtSTkxNThWIiwiR1QtSTkxNjhJIiwiR1QtSTkxOTAiLCJHVC1JOTE5MiIsIkdULUk5MTkySSIsIkdULUk5MTk1SCIsIkdULUk5MTk1TCIsIkdULUk5MjUwIiwiR1QtSTkzMDAiLCJHVC1JOTMwMEkiLCJHVC1JOTMwMUkiLCJHVC1JOTMwM0kiLCJHVC1JOTMwNU4iLCJHVC1JOTMwOEkiLCJHVC1JOTUwMCIsIkdULUk5NTA1RyIsIkdULUk5NTA1WCIsIkdULUk5NTA3ViIsIkdULUk5NjAwIiwiR1QtTTU2NTAiLCJHVC1ONTAwMFMiLCJHVC1ONTEwMCIsIkdULU41MTA1IiwiR1QtTjUxMTAiLCJHVC1ONTEyMCIsIkdULU43MDAwQiIsIkdULU43MDA1IiwiR1QtTjcxMDAiLCJHVC1ONzEwMFQiLCJHVC1ONzEwMiIsIkdULU43MTA1IiwiR1QtTjcxMDVUIiwiR1QtTjcxMDgiLCJHVC1ONzEwOEQiLCJHVC1OODAwMCIsIkdULU44MDA1IiwiR1QtTjgwMTAiLCJHVC1OODAyMCIsIkdULU45MDAwIiwiR1QtTjk1MDUiLCJHVC1QMTAwMENXQVhTQSIsIkdULVAxMDAwTSIsIkdULVAxMDAwVCIsIkdULVAxMDEwIiwiR1QtUDMxMDBCIiwiR1QtUDMxMDUiLCJHVC1QMzEwOCIsIkdULVAzMTEwIiwiR1QtUDUxMDAiLCJHVC1QNTExMCIsIkdULVA1MjAwIiwiR1QtUDUyMTAiLCJHVC1QNTIxMFhEMSIsIkdULVA1MjIwIiwiR1QtUDYyMDAiLCJHVC1QNjIwMEwiLCJHVC1QNjIwMSIsIkdULVA2MjEwIiwiR1QtUDYyMTEiLCJHVC1QNjgwMCIsIkdULVA3MTAwIiwiR1QtUDczMDAiLCJHVC1QNzMwMEIiLCJHVC1QNzMxMCIsIkdULVA3MzIwIiwiR1QtUDc1MDBEIiwiR1QtUDc1MDBNIiwiU0FNU1VORyIsIkxNWTQiLCJMTVk0N1YiLCJNTUIyOUsiLCJNTUIyOU0iLCJMUlgyMkMiLCJMUlgyMkciLCJOTUYyIiwiTk1GMjZYIiwiTk1GMjZYOyIsIk5SRDkwTSIsIk5SRDkwTTsiLCJTUEgtTDcyMCIsIklNTDc0SyIsIklNTTc2RCIsIkpEUTM5IiwiSlNTMTVKIiwiSlpPNTRLIiwiS09UNCIsIktPVDQ5SCIsIktPVDRTTS1UMzEwIiwiS1RVODRQIiwiU00tQTUwMEYiLCJTTS1BNTAwRlUiLCJTTS1BNTAwSCIsIlNNLUc1MzJGIiwiU00tRzkwMEYiLCJTTS1HOTIwRiIsIlNNLUc5MzBGIiwiU00tRzkzNSIsIlNNLUc5NTBGIiwiU00tSjMyMEYiLCJTTS1KMzIwRk4iLCJTTS1KMzIwSCIsIlNNLUozMjBNIiwiU00tSjUxMEZOIiwiU00tSjcwMUYiLCJTTS1OOTIwUyIsIlNNLVQxMTEiLCJTTS1UMjMwIiwiU00tVDIzMSIsIlNNLVQyMzUiLCJTTS1UMjgwIiwiU00tVDMxMSIsIlNNLVQzMTUiLCJTTS1UNTI1IiwiU00tVDUzMSIsIlNNLVQ1MzUiLCJTTS1UNTU1IiwiU00tVDU2MSIsIlNNLVQ3MDUiLCJTTS1UODA1IiwiU00tVDgyMCIpDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGd0dD1yYW5kb20uY2hvaWNlKHh4eHh4KQ0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBndHR0PXJhbmRvbS5jaG9pY2UoeHh4eHgpDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFuZHJvaWRfdmVyc2lvbj1zdHIocmFuZG9tLnJhbmRyYW5nZSg2LDEzKSkNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdWFfc3RyaW5nID0gZidEREVYVEVSay8yLjEuMCAobGluZXg7IFU7IEFuZHJvaWQge3N0cihhbmRyb2lkX3ZlcnNpb24pfS4wLjA7IHtzdHIoZ3R0KX0gQnVpbGQve3N0cihndHR0KX0gW0ZCQU4vRkI0QTtGQkFWL3tzdHIoYXBwbGljYXRpb25fdmVyc2lvbil9O0ZCQlYve3N0cihhcHBsaWNhdGlvbl92ZXJzaW9uX2NvZGUpfTtGQkRNLycrJ3tkZW5zaXR5PTIuMCx3aWR0aD03MjAsaGVpZ2h0PTEyODB9OycrZidGQkxDL2VzX0NVO0ZCUlYve3N0cihhcHBsaWNhdGlvbl92ZXJzaW9uX2NvZGUpfTtGQkNSL01vdmlzdGFyO0ZCTUYvc2Ftc3VuZztGQkJEL3NhbXN1bmc7RkJQTi97c3RyKGZicyl9O0ZCRFYve3N0cihndHQpfTtGQlNWLzcuMDtGQk9QLzE7RkJDQS9hcm1lYWJpLXY3YTphcm1lYWJpO10nDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRldmljZV9pZCA9IHN0cih1dWlkLnV1aWQ0KCkpDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFkaWQgPSBzdHIodXVpZC51dWlkNCgpKQ0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhID0geyJhZGlkIjogIjllMGYzMDAyLTQzZmMtNDM1OC04OWYxLTU2MjJiNDAzZDUwMiIsDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ2VtYWlsJzppZHMsDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ3Bhc3N3b3JkJzpwYXMsDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ2NwbCc6J3RydWUnLA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdjcmVkZW50aWFsc190eXBlJzonZGV2aWNlX2Jhc2VkX2xvZ2luX3Bhc3N3b3JkJywNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAic291cmNlIjoiZGV2aWNlX2Jhc2VkX2xvZ2luIiwNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnZXJyb3JfZGV0YWlsX3R5cGUnOididXR0b25fd2l0aF9kaXNhYmxlZCcsDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ3NvdXJjZSc6J2xvZ2luJywnZm9ybWF0JzonanNvbicsDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ2dlbmVyYXRlX3Nlc3Npb25fY29va2llcyc6JzEnLA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdnZW5lcmF0ZV9hbmFseXRpY3NfY2xhaW0nOicxJywNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnZ2VuZXJhdGVfbWFjaGluZV9pZCc6JzEnLA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICJsb2NhbGUiOiJlc19DVSIsImNsaWVudF9jb3VudHJ5X2NvZGUiOiJDVSIsDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ2RldmljZSc6Z3R0LA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICJkZXZpY2VfaWQiOiI2ZTE4ODYxZS1kNTc4LTRjZmItODcyOC01MjhmMWU0YjkwZTciLA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICJtZXRob2QiOiJhdXRoLmxvZ2luIiwNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAiZmJfYXBpX3JlcV9mcmllbmRseV9uYW1lIjogImF1dGhlbnRpY2F0ZSIsDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgImZiX2FwaV9jYWxsZXJfY2xhc3MiOiAiY29tLmZhY2Vib29rLmFjY291bnQubG9naW4ucHJvdG9jb2wuRmI0YUF1dGhIYW5kbGVyIn0NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaGVhZCA9IHsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnY29udGVudC10eXBlJzonYXBwbGljYXRpb24veC13d3ctZm9ybS11cmxlbmNvZGVkJywNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAneC1mYi1zaW0taG5pJzpzdHIocmFuZG9tLnJhbmRpbnQoMmU0LDRlNCkpLA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICd4LWZiLWNvbm5lY3Rpb24tdHlwZSc6J3Vua25vd24nLA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdBdXRob3JpemF0aW9uJzonT0F1dGggMzUwNjg1NTMxNzI4fDYyZjhjZTlmNzRiMTJmODRjMTIzY2MyMzQzN2E0YTMyJywNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnVXNlci1BZ2VudCc6ICdEREVYVEVSay8yLjEuMCBMaW51eDsgVTsgQW5kcm9pZCA2LjAuMDsgR1QtSTkzMDBJIEJ1aWxkL0tUVTg0UCkgW0ZCQU4vRkI0QTtGQkFWLzU0MC4wLjAuODQuNjI2O0ZCQlYvMTY5NzE3MjUwO0ZCRE0ve2RlbnNpdHk9NC4wLHdpZHRoPTE1MzIsaGVpZ2h0PTI1NjB9O0ZCTEMvZW5fVVM7RkJDUi9HcmFtZWVucGhvbmU7RkJNRi9zYW1zdW5nO0ZCQkQvc2Ftc3VuZztGQlBOL2NvbS5mYWNlYm9vay5rYXRhbmE7RkJEVi9HVC1JOTMwMEk7RkJTVi82LjAuMDtGQkNBL2FybWVhYmktdjdhOmFybWVhYmk7XScsDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ3gtZmItbmV0LWhuaSc6c3RyKHJhbmRvbS5yYW5kaW50KDJlNCw0ZTQpKSwNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAneC1mYi1jb25uZWN0aW9uLWJhbmR3aWR0aCc6c3RyKHJhbmRvbS5yYW5kaW50KDJlNywzZTcpKSwNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAneC1mYi1jb25uZWN0aW9uLXF1YWxpdHknOidFWENFTExFTlQnLA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICd4LWZiLWZyaWVuZGx5LW5hbWUnOidhdXRoZW50aWNhdGUnLA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdhY2NlcHQtZW5jb2RpbmcnOidnemlwLCBkZWZsYXRlJywNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAneC1mYi1odHRwLWVuZ2luZSc6ICAgICAnTGlnZXInfQ0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB1cmwgPSAnaHR0cHM6Ly9iLWdyYXBoLmZhY2Vib29rLmNvbS9hdXRoL2xvZ2luP2luY2x1ZGVfaGVhZGVycz1mYWxzZSZkZWNvZGVfYm9keV9qc29uPWZhbHNlJnN0cmVhbWFibGVfanNvbl9yZXNwb25zZT10cnVlJw0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwbyA9IHJlcXVlc3RzLnBvc3QodXJsLGRhdGE9ZGF0YSxoZWFkZXJzPWhlYWQsYWxsb3dfcmVkaXJlY3RzPUZhbHNlKS50ZXh0DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHEgPSBqc29uLmxvYWRzKHBvKQ0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAnc2Vzc2lvbl9rZXknIGluIHE6DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcHJpbnQoZidcclxyXDAzM1sxOzMybSBbREVYVEVSLUxJVkVdICcraWRzKycgfCAnK3BhcysnXDAzM1sxOzk3bScpDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb3BlbihmJy9zZGNhcmQvREVYVEVSLUxJVkUudHh0JywnYScpLndyaXRlKGlkcysnfCcrcGFzKydcbicpO29wZW4oZicvc2RjYXJkL0RFWFRFUi1MSVZFLUNPT0tJRS50eHQnLCAnYScpLndyaXRlKGlkcysnfCcrcGFzKyd8JytrdWtpKydcbicpDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgI2Nla19hcGsoc2Vzc2lvbixjb2tpKQ0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9rcy5hcHBlbmQoaWRzKQ0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsaWYgJ3d3dy5mYWNlYm9vay5jb20nIGluIHFbJ2Vycm9yJ11bJ21lc3NhZ2UnXToNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAneScgaW4gcGNwOg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcHJpbnQoZidcclxyXHgxYlsxOzMxbSBbREVYVEVSLURFQURdICcraWRzKycgfCAnK3BhcysnXDAzM1sxOzk3bScpDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvcGVuKGYnL3NkY2FyZFtERVhURVItREVBRC50eHQnLCAnYScpLndyaXRlKGlkcysnfCcrcGFzKydcbicpDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjcHMuYXBwZW5kKGlkcykNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZWxzZToNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9wZW4oZicvc2RjYXJkL0RFWFRFUi1ERUFELnR4dCcsJ2EnKS53cml0ZShpZHMrJ3wnK3BhcysnXG4nKQ0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZWxzZToNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb250aW51ZQ0KICAgICAgICAgICAgICAgICAgICAgICAgbG9vcCs9MQ0KICAgICAgICAgICAgICAgIGV4Y2VwdCByZXF1ZXN0cy5leGNlcHRpb25zLkNvbm5lY3Rpb25FcnJvcjoNCiAgICAgICAgICAgICAgICAgICAgICAgIHRpbWUuc2xlZXAoMTApDQogICAgICAgICAgICAgICAgZXhjZXB0IEV4Y2VwdGlvbiBhcyBlOg0KICAgICAgICAgICAgICAgICAgICAgICAgcGFzcw0KCQkNCg0KDQptZW51KCkJCSAg'))
